/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Web
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import url from 'url';
const portableFetch = fetch;
//const BASE_PATH = "http://220.165.143.73:666".replace(/\/+$/, "");
const BASE_PATH = location.host.indexOf('localhost') >= 0 || location.host.indexOf('127.0.0.1') >= 0
    ? `${location.protocol}//${location.host}/api`.replace(/\/+$/, '')
    : `${location.protocol}//${location.host}`.replace(/\/+$/, '');
/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    constructor(configuration, basePath = BASE_PATH, fetch = portableFetch) {
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
    }
}
/**
 * @export
 * @namespace ChatMessageDto
 */
export var ChatMessageDto;
(function (ChatMessageDto) {
    /**
     * @export
     * @enum {string}
     */
    let SideEnum;
    (function (SideEnum) {
        SideEnum[SideEnum["NUMBER_1"] = 1] = "NUMBER_1";
        SideEnum[SideEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(SideEnum = ChatMessageDto.SideEnum || (ChatMessageDto.SideEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let ReadStateEnum;
    (function (ReadStateEnum) {
        ReadStateEnum[ReadStateEnum["NUMBER_1"] = 1] = "NUMBER_1";
        ReadStateEnum[ReadStateEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(ReadStateEnum = ChatMessageDto.ReadStateEnum || (ChatMessageDto.ReadStateEnum = {}));
})(ChatMessageDto || (ChatMessageDto = {}));
/**
 * @export
 * @namespace CommitMessageInput
 */
export var CommitMessageInput;
(function (CommitMessageInput) {
    /**
     * @export
     * @enum {string}
     */
    let IdentityTypeEnum;
    (function (IdentityTypeEnum) {
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_1"] = 1] = "NUMBER_1";
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_2"] = 2] = "NUMBER_2";
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_3"] = 3] = "NUMBER_3";
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_4"] = 4] = "NUMBER_4";
    })(IdentityTypeEnum = CommitMessageInput.IdentityTypeEnum || (CommitMessageInput.IdentityTypeEnum = {}));
})(CommitMessageInput || (CommitMessageInput = {}));
/**
 * @export
 * @namespace CreateAppStartPageDto
 */
export var CreateAppStartPageDto;
(function (CreateAppStartPageDto) {
    /**
     * @export
     * @enum {string}
     */
    let PlatformEnum;
    (function (PlatformEnum) {
        PlatformEnum[PlatformEnum["NUMBER_1"] = 1] = "NUMBER_1";
        PlatformEnum[PlatformEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(PlatformEnum = CreateAppStartPageDto.PlatformEnum || (CreateAppStartPageDto.PlatformEnum = {}));
})(CreateAppStartPageDto || (CreateAppStartPageDto = {}));
/**
 * @export
 * @namespace CreateMessagerDto
 */
export var CreateMessagerDto;
(function (CreateMessagerDto) {
    /**
     * @export
     * @enum {string}
     */
    let IdentityTypeEnum;
    (function (IdentityTypeEnum) {
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_1"] = 1] = "NUMBER_1";
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_2"] = 2] = "NUMBER_2";
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_3"] = 3] = "NUMBER_3";
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_4"] = 4] = "NUMBER_4";
    })(IdentityTypeEnum = CreateMessagerDto.IdentityTypeEnum || (CreateMessagerDto.IdentityTypeEnum = {}));
})(CreateMessagerDto || (CreateMessagerDto = {}));
/**
 * @export
 * @namespace FriendDto
 */
export var FriendDto;
(function (FriendDto) {
    /**
     * @export
     * @enum {string}
     */
    let StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["NUMBER_1"] = 1] = "NUMBER_1";
        StateEnum[StateEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(StateEnum = FriendDto.StateEnum || (FriendDto.StateEnum = {}));
})(FriendDto || (FriendDto = {}));
/**
 * @export
 * @namespace GetAppEditionsInput
 */
export var GetAppEditionsInput;
(function (GetAppEditionsInput) {
    /**
     * @export
     * @enum {string}
     */
    let AppSearchTypeEnum;
    (function (AppSearchTypeEnum) {
        AppSearchTypeEnum[AppSearchTypeEnum["NUMBER_0"] = 0] = "NUMBER_0";
        AppSearchTypeEnum[AppSearchTypeEnum["NUMBER_1"] = 1] = "NUMBER_1";
        AppSearchTypeEnum[AppSearchTypeEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(AppSearchTypeEnum = GetAppEditionsInput.AppSearchTypeEnum || (GetAppEditionsInput.AppSearchTypeEnum = {}));
})(GetAppEditionsInput || (GetAppEditionsInput = {}));
/**
 * @export
 * @namespace GetAppStartPageDto
 */
export var GetAppStartPageDto;
(function (GetAppStartPageDto) {
    /**
     * @export
     * @enum {string}
     */
    let PlatformEnum;
    (function (PlatformEnum) {
        PlatformEnum[PlatformEnum["NUMBER_1"] = 1] = "NUMBER_1";
        PlatformEnum[PlatformEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(PlatformEnum = GetAppStartPageDto.PlatformEnum || (GetAppStartPageDto.PlatformEnum = {}));
})(GetAppStartPageDto || (GetAppStartPageDto = {}));
/**
 * @export
 * @namespace GetAppStartPageInput
 */
export var GetAppStartPageInput;
(function (GetAppStartPageInput) {
    /**
     * @export
     * @enum {string}
     */
    let PlatformEnum;
    (function (PlatformEnum) {
        PlatformEnum[PlatformEnum["NUMBER_1"] = 1] = "NUMBER_1";
        PlatformEnum[PlatformEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(PlatformEnum = GetAppStartPageInput.PlatformEnum || (GetAppStartPageInput.PlatformEnum = {}));
})(GetAppStartPageInput || (GetAppStartPageInput = {}));
/**
 * @export
 * @namespace GetListAppStartPageDto
 */
export var GetListAppStartPageDto;
(function (GetListAppStartPageDto) {
    /**
     * @export
     * @enum {string}
     */
    let PlatformEnum;
    (function (PlatformEnum) {
        PlatformEnum[PlatformEnum["NUMBER_1"] = 1] = "NUMBER_1";
        PlatformEnum[PlatformEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(PlatformEnum = GetListAppStartPageDto.PlatformEnum || (GetListAppStartPageDto.PlatformEnum = {}));
})(GetListAppStartPageDto || (GetListAppStartPageDto = {}));
/**
 * @export
 * @namespace GetListMessagerDto
 */
export var GetListMessagerDto;
(function (GetListMessagerDto) {
    /**
     * @export
     * @enum {string}
     */
    let IdentityTypeEnum;
    (function (IdentityTypeEnum) {
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_1"] = 1] = "NUMBER_1";
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_2"] = 2] = "NUMBER_2";
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_3"] = 3] = "NUMBER_3";
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_4"] = 4] = "NUMBER_4";
    })(IdentityTypeEnum = GetListMessagerDto.IdentityTypeEnum || (GetListMessagerDto.IdentityTypeEnum = {}));
})(GetListMessagerDto || (GetListMessagerDto = {}));
/**
 * @export
 * @namespace GetMessagerDto
 */
export var GetMessagerDto;
(function (GetMessagerDto) {
    /**
     * @export
     * @enum {string}
     */
    let IdentityTypeEnum;
    (function (IdentityTypeEnum) {
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_1"] = 1] = "NUMBER_1";
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_2"] = 2] = "NUMBER_2";
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_3"] = 3] = "NUMBER_3";
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_4"] = 4] = "NUMBER_4";
    })(IdentityTypeEnum = GetMessagerDto.IdentityTypeEnum || (GetMessagerDto.IdentityTypeEnum = {}));
})(GetMessagerDto || (GetMessagerDto = {}));
/**
 * @export
 * @namespace GetUserNotificationsInput
 */
export var GetUserNotificationsInput;
(function (GetUserNotificationsInput) {
    /**
     * @export
     * @enum {string}
     */
    let StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["NUMBER_0"] = 0] = "NUMBER_0";
        StateEnum[StateEnum["NUMBER_1"] = 1] = "NUMBER_1";
    })(StateEnum = GetUserNotificationsInput.StateEnum || (GetUserNotificationsInput.StateEnum = {}));
})(GetUserNotificationsInput || (GetUserNotificationsInput = {}));
/**
 * @export
 * @namespace IsTenantAvailableOutput
 */
export var IsTenantAvailableOutput;
(function (IsTenantAvailableOutput) {
    /**
     * @export
     * @enum {string}
     */
    let StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["NUMBER_1"] = 1] = "NUMBER_1";
        StateEnum[StateEnum["NUMBER_2"] = 2] = "NUMBER_2";
        StateEnum[StateEnum["NUMBER_3"] = 3] = "NUMBER_3";
    })(StateEnum = IsTenantAvailableOutput.StateEnum || (IsTenantAvailableOutput.StateEnum = {}));
})(IsTenantAvailableOutput || (IsTenantAvailableOutput = {}));
/**
 * @export
 * @namespace IsUpatedInput
 */
export var IsUpatedInput;
(function (IsUpatedInput) {
    /**
     * @export
     * @enum {string}
     */
    let PlatformEnum;
    (function (PlatformEnum) {
        PlatformEnum[PlatformEnum["NUMBER_1"] = 1] = "NUMBER_1";
        PlatformEnum[PlatformEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(PlatformEnum = IsUpatedInput.PlatformEnum || (IsUpatedInput.PlatformEnum = {}));
})(IsUpatedInput || (IsUpatedInput = {}));
/**
 * @export
 * @namespace TenantNotification
 */
export var TenantNotification;
(function (TenantNotification) {
    /**
     * @export
     * @enum {string}
     */
    let SeverityEnum;
    (function (SeverityEnum) {
        SeverityEnum[SeverityEnum["NUMBER_0"] = 0] = "NUMBER_0";
        SeverityEnum[SeverityEnum["NUMBER_1"] = 1] = "NUMBER_1";
        SeverityEnum[SeverityEnum["NUMBER_2"] = 2] = "NUMBER_2";
        SeverityEnum[SeverityEnum["NUMBER_3"] = 3] = "NUMBER_3";
        SeverityEnum[SeverityEnum["NUMBER_4"] = 4] = "NUMBER_4";
    })(SeverityEnum = TenantNotification.SeverityEnum || (TenantNotification.SeverityEnum = {}));
})(TenantNotification || (TenantNotification = {}));
/**
 * @export
 * @namespace ThirdPartyLoginModel
 */
export var ThirdPartyLoginModel;
(function (ThirdPartyLoginModel) {
    /**
     * @export
     * @enum {string}
     */
    let ThirdPartyEnum;
    (function (ThirdPartyEnum) {
        ThirdPartyEnum[ThirdPartyEnum["NUMBER_1"] = 1] = "NUMBER_1";
        ThirdPartyEnum[ThirdPartyEnum["NUMBER_2"] = 2] = "NUMBER_2";
        ThirdPartyEnum[ThirdPartyEnum["NUMBER_3"] = 3] = "NUMBER_3";
        ThirdPartyEnum[ThirdPartyEnum["NUMBER_4"] = 4] = "NUMBER_4";
    })(ThirdPartyEnum = ThirdPartyLoginModel.ThirdPartyEnum || (ThirdPartyLoginModel.ThirdPartyEnum = {}));
})(ThirdPartyLoginModel || (ThirdPartyLoginModel = {}));
/**
 * @export
 * @namespace UpdateAppStartPageDto
 */
export var UpdateAppStartPageDto;
(function (UpdateAppStartPageDto) {
    /**
     * @export
     * @enum {string}
     */
    let PlatformEnum;
    (function (PlatformEnum) {
        PlatformEnum[PlatformEnum["NUMBER_1"] = 1] = "NUMBER_1";
        PlatformEnum[PlatformEnum["NUMBER_2"] = 2] = "NUMBER_2";
    })(PlatformEnum = UpdateAppStartPageDto.PlatformEnum || (UpdateAppStartPageDto.PlatformEnum = {}));
})(UpdateAppStartPageDto || (UpdateAppStartPageDto = {}));
/**
 * @export
 * @namespace UpdateMessagerDto
 */
export var UpdateMessagerDto;
(function (UpdateMessagerDto) {
    /**
     * @export
     * @enum {string}
     */
    let IdentityTypeEnum;
    (function (IdentityTypeEnum) {
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_1"] = 1] = "NUMBER_1";
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_2"] = 2] = "NUMBER_2";
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_3"] = 3] = "NUMBER_3";
        IdentityTypeEnum[IdentityTypeEnum["NUMBER_4"] = 4] = "NUMBER_4";
    })(IdentityTypeEnum = UpdateMessagerDto.IdentityTypeEnum || (UpdateMessagerDto.IdentityTypeEnum = {}));
})(UpdateMessagerDto || (UpdateMessagerDto = {}));
/**
 * @export
 * @namespace UserNotification
 */
export var UserNotification;
(function (UserNotification) {
    /**
     * @export
     * @enum {string}
     */
    let StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["NUMBER_0"] = 0] = "NUMBER_0";
        StateEnum[StateEnum["NUMBER_1"] = 1] = "NUMBER_1";
    })(StateEnum = UserNotification.StateEnum || (UserNotification.StateEnum = {}));
})(UserNotification || (UserNotification = {}));
/**
 * AbpCacheApi - fetch parameter creator
 * @export
 */
export const AbpCacheApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {ClearCacheModel} model
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abpCacheClear(model, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'model' is not null or undefined
            if (model === null || model === undefined) {
                throw new RequiredError('model', 'Required parameter model was null or undefined when calling abpCacheClear.');
            }
            const localVarPath = `/api/AbpCache/Clear`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ClearCacheModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ClearAllCacheModel} model
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abpCacheClearAll(model, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'model' is not null or undefined
            if (model === null || model === undefined) {
                throw new RequiredError('model', 'Required parameter model was null or undefined when calling abpCacheClearAll.');
            }
            const localVarPath = `/api/AbpCache/ClearAll`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ClearAllCacheModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(model || {}) : (model || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AbpCacheApi - functional programming interface
 * @export
 */
export const AbpCacheApiFp = function (configuration) {
    return {
        /**
         *
         * @param {ClearCacheModel} model
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abpCacheClear(model, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AbpCacheApiFetchParamCreator(configuration).abpCacheClear(model, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {ClearAllCacheModel} model
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abpCacheClearAll(model, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AbpCacheApiFetchParamCreator(configuration).abpCacheClearAll(model, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AbpCacheApi - factory interface
 * @export
 */
export const AbpCacheApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {ClearCacheModel} model
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abpCacheClear(model, X_XSRF_TOKEN, authorization, options) {
            return AbpCacheApiFp(configuration).abpCacheClear(model, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {ClearAllCacheModel} model
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abpCacheClearAll(model, X_XSRF_TOKEN, authorization, options) {
            return AbpCacheApiFp(configuration).abpCacheClearAll(model, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * AbpCacheApi - object-oriented interface
 * @export
 * @class AbpCacheApi
 * @extends {BaseAPI}
 */
export class AbpCacheApi extends BaseAPI {
    /**
     *
     * @param {ClearCacheModel} model
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbpCacheApi
     */
    abpCacheClear(model, X_XSRF_TOKEN, authorization, options) {
        return AbpCacheApiFp(this.configuration).abpCacheClear(model, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {ClearAllCacheModel} model
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbpCacheApi
     */
    abpCacheClearAll(model, X_XSRF_TOKEN, authorization, options) {
        return AbpCacheApiFp(this.configuration).abpCacheClearAll(model, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * AbpServiceProxiesApi - fetch parameter creator
 * @export
 */
export const AbpServiceProxiesApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} name
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {0 | 1} [type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abpServiceProxiesGet(name, X_XSRF_TOKEN, authorization, type, options = {}) {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling abpServiceProxiesGet.');
            }
            const localVarPath = `/api/AbpServiceProxies`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AbpServiceProxiesApi - functional programming interface
 * @export
 */
export const AbpServiceProxiesApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} name
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {0 | 1} [type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abpServiceProxiesGet(name, X_XSRF_TOKEN, authorization, type, options) {
            const localVarFetchArgs = AbpServiceProxiesApiFetchParamCreator(configuration).abpServiceProxiesGet(name, X_XSRF_TOKEN, authorization, type, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AbpServiceProxiesApi - factory interface
 * @export
 */
export const AbpServiceProxiesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {string} name
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {0 | 1} [type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abpServiceProxiesGet(name, X_XSRF_TOKEN, authorization, type, options) {
            return AbpServiceProxiesApiFp(configuration).abpServiceProxiesGet(name, X_XSRF_TOKEN, authorization, type, options)(fetch, basePath);
        },
    };
};
/**
 * AbpServiceProxiesApi - object-oriented interface
 * @export
 * @class AbpServiceProxiesApi
 * @extends {BaseAPI}
 */
export class AbpServiceProxiesApi extends BaseAPI {
    /**
     *
     * @param {string} name
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {0 | 1} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbpServiceProxiesApi
     */
    abpServiceProxiesGet(name, X_XSRF_TOKEN, authorization, type, options) {
        return AbpServiceProxiesApiFp(this.configuration).abpServiceProxiesGet(name, X_XSRF_TOKEN, authorization, type, options)(this.fetch, this.basePath);
    }
}
/**
 * AccountApi - fetch parameter creator
 * @export
 */
export const AccountApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 登录认证
         * @param {LoginModel} loginModel
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAuthenticate(loginModel, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'loginModel' is not null or undefined
            if (loginModel === null || loginModel === undefined) {
                throw new RequiredError('loginModel', 'Required parameter loginModel was null or undefined when calling accountAuthenticate.');
            }
            const localVarPath = `/api/Account`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("LoginModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(loginModel || {}) : (loginModel || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 绑定账号  （无调用）
         * @param {BindingThirdPartyInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAccountBindingThirdParty(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAccountBindingThirdParty.');
            }
            const localVarPath = `/api/services/app/account/BindingThirdParty`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("BindingThirdPartyInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 租户是否可用  （无调用）
         * @param {IsTenantAvailableInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAccountIsTenantAvailable(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAccountIsTenantAvailable.');
            }
            const localVarPath = `/api/services/app/account/IsTenantAvailable`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("IsTenantAvailableInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 登录时发送手机证码
         * @param {PhoneWithCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAccountSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAccountSendPhoneNumberCode.');
            }
            const localVarPath = `/api/services/app/account/SendPhoneNumberCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("PhoneWithCaptchaInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 登录认证
         * @param {LoginModel} loginModel
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAuthenticate(loginModel, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).accountAuthenticate(loginModel, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 绑定账号  （无调用）
         * @param {BindingThirdPartyInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAccountBindingThirdParty(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).appAccountBindingThirdParty(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 租户是否可用  （无调用）
         * @param {IsTenantAvailableInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAccountIsTenantAvailable(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).appAccountIsTenantAvailable(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 登录时发送手机证码
         * @param {PhoneWithCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAccountSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).appAccountSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 登录认证
         * @param {LoginModel} loginModel
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAuthenticate(loginModel, X_XSRF_TOKEN, authorization, options) {
            return AccountApiFp(configuration).accountAuthenticate(loginModel, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 绑定账号  （无调用）
         * @param {BindingThirdPartyInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAccountBindingThirdParty(input, X_XSRF_TOKEN, authorization, options) {
            return AccountApiFp(configuration).appAccountBindingThirdParty(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 租户是否可用  （无调用）
         * @param {IsTenantAvailableInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAccountIsTenantAvailable(input, X_XSRF_TOKEN, authorization, options) {
            return AccountApiFp(configuration).appAccountIsTenantAvailable(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 登录时发送手机证码
         * @param {PhoneWithCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAccountSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options) {
            return AccountApiFp(configuration).appAccountSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     *
     * @summary 登录认证
     * @param {LoginModel} loginModel
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    accountAuthenticate(loginModel, X_XSRF_TOKEN, authorization, options) {
        return AccountApiFp(this.configuration).accountAuthenticate(loginModel, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 绑定账号  （无调用）
     * @param {BindingThirdPartyInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    appAccountBindingThirdParty(input, X_XSRF_TOKEN, authorization, options) {
        return AccountApiFp(this.configuration).appAccountBindingThirdParty(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 租户是否可用  （无调用）
     * @param {IsTenantAvailableInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    appAccountIsTenantAvailable(input, X_XSRF_TOKEN, authorization, options) {
        return AccountApiFp(this.configuration).appAccountIsTenantAvailable(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 登录时发送手机证码
     * @param {PhoneWithCaptchaInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    appAccountSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options) {
        return AccountApiFp(this.configuration).appAccountSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * ActiveApi - fetch parameter creator
 * @export
 */
export const ActiveApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 验证邮箱验  （sendemail）
         * @param {ConfirmEmailCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveConfirmEmailByCode(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appActiveConfirmEmailByCode.');
            }
            const localVarPath = `/api/services/app/active/ConfirmEmailByCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ConfirmEmailCodeInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 验证手机号  （sendemail）
         * @param {VerificationCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appActiveConfirmPhoneNumberByCode.');
            }
            const localVarPath = `/api/services/app/active/ConfirmPhoneNumberByCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("VerificationCodeInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 发送邮箱验证码  （sendemail）
         * @param {SendConfirmEmailByCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveSendConfirmEmailCode(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appActiveSendConfirmEmailCode.');
            }
            const localVarPath = `/api/services/app/active/SendConfirmEmailCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("SendConfirmEmailByCaptchaInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 发送手机激活验证码  （sendemail）
         * @param {VerificationCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveSendConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appActiveSendConfirmPhoneNumberByCode.');
            }
            const localVarPath = `/api/services/app/active/SendConfirmPhoneNumberByCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("VerificationCodeInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ActiveApi - functional programming interface
 * @export
 */
export const ActiveApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 验证邮箱验  （sendemail）
         * @param {ConfirmEmailCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveConfirmEmailByCode(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ActiveApiFetchParamCreator(configuration).appActiveConfirmEmailByCode(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 验证手机号  （sendemail）
         * @param {VerificationCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ActiveApiFetchParamCreator(configuration).appActiveConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 发送邮箱验证码  （sendemail）
         * @param {SendConfirmEmailByCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveSendConfirmEmailCode(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ActiveApiFetchParamCreator(configuration).appActiveSendConfirmEmailCode(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 发送手机激活验证码  （sendemail）
         * @param {VerificationCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveSendConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ActiveApiFetchParamCreator(configuration).appActiveSendConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ActiveApi - factory interface
 * @export
 */
export const ActiveApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 验证邮箱验  （sendemail）
         * @param {ConfirmEmailCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveConfirmEmailByCode(input, X_XSRF_TOKEN, authorization, options) {
            return ActiveApiFp(configuration).appActiveConfirmEmailByCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 验证手机号  （sendemail）
         * @param {VerificationCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options) {
            return ActiveApiFp(configuration).appActiveConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 发送邮箱验证码  （sendemail）
         * @param {SendConfirmEmailByCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveSendConfirmEmailCode(input, X_XSRF_TOKEN, authorization, options) {
            return ActiveApiFp(configuration).appActiveSendConfirmEmailCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 发送手机激活验证码  （sendemail）
         * @param {VerificationCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appActiveSendConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options) {
            return ActiveApiFp(configuration).appActiveSendConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * ActiveApi - object-oriented interface
 * @export
 * @class ActiveApi
 * @extends {BaseAPI}
 */
export class ActiveApi extends BaseAPI {
    /**
     *
     * @summary 验证邮箱验  （sendemail）
     * @param {ConfirmEmailCodeInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActiveApi
     */
    appActiveConfirmEmailByCode(input, X_XSRF_TOKEN, authorization, options) {
        return ActiveApiFp(this.configuration).appActiveConfirmEmailByCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 验证手机号  （sendemail）
     * @param {VerificationCodeInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActiveApi
     */
    appActiveConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options) {
        return ActiveApiFp(this.configuration).appActiveConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 发送邮箱验证码  （sendemail）
     * @param {SendConfirmEmailByCaptchaInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActiveApi
     */
    appActiveSendConfirmEmailCode(input, X_XSRF_TOKEN, authorization, options) {
        return ActiveApiFp(this.configuration).appActiveSendConfirmEmailCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 发送手机激活验证码  （sendemail）
     * @param {VerificationCodeInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActiveApi
     */
    appActiveSendConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options) {
        return ActiveApiFp(this.configuration).appActiveSendConfirmPhoneNumberByCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * AppEditionsApi - fetch parameter creator
 * @export
 */
export const AppEditionsApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {VersionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsCheckUpdate(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppEditionsCheckUpdate.');
            }
            const localVarPath = `/api/services/app/appEditions/CheckUpdate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("VersionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {CreateAndroidAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsCreateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppEditionsCreateAndroidAppEdition.');
            }
            const localVarPath = `/api/services/app/appEditions/CreateAndroidAppEdition`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CreateAndroidAppEditionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {CreateIOSAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsCreateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppEditionsCreateIOSAppEdition.');
            }
            const localVarPath = `/api/services/app/appEditions/CreateIOSAppEdition`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CreateIOSAppEditionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {EntityDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsDeleteAppEdition(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppEditionsDeleteAppEdition.');
            }
            const localVarPath = `/api/services/app/appEditions/DeleteAppEdition`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsDownloadAppEdition(id, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling appAppEditionsDownloadAppEdition.');
            }
            const localVarPath = `/api/services/app/appEditions/DownloadAppEdition`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {VersionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsGetAbout(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppEditionsGetAbout.');
            }
            const localVarPath = `/api/services/app/appEditions/GetAbout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("VersionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {VersionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsGetAboutAndCheckUpdate(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppEditionsGetAboutAndCheckUpdate.');
            }
            const localVarPath = `/api/services/app/appEditions/GetAboutAndCheckUpdate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("VersionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {GetAppEditionsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsGetAppEditions(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppEditionsGetAppEditions.');
            }
            const localVarPath = `/api/services/app/appEditions/GetAppEditions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("GetAppEditionsInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {UpdateAndroidAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsUpdateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppEditionsUpdateAndroidAppEdition.');
            }
            const localVarPath = `/api/services/app/appEditions/UpdateAndroidAppEdition`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UpdateAndroidAppEditionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {UpdateIOSAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsUpdateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppEditionsUpdateIOSAppEdition.');
            }
            const localVarPath = `/api/services/app/appEditions/UpdateIOSAppEdition`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UpdateIOSAppEditionInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsUploadAppEdition(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/appEditions/UploadAppEdition`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AppEditionsApi - functional programming interface
 * @export
 */
export const AppEditionsApiFp = function (configuration) {
    return {
        /**
         *
         * @param {VersionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsCheckUpdate(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).appAppEditionsCheckUpdate(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {CreateAndroidAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsCreateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).appAppEditionsCreateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {CreateIOSAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsCreateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).appAppEditionsCreateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsDeleteAppEdition(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).appAppEditionsDeleteAppEdition(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {number} id
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsDownloadAppEdition(id, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).appAppEditionsDownloadAppEdition(id, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {VersionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsGetAbout(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).appAppEditionsGetAbout(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {VersionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsGetAboutAndCheckUpdate(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).appAppEditionsGetAboutAndCheckUpdate(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {GetAppEditionsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsGetAppEditions(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).appAppEditionsGetAppEditions(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {UpdateAndroidAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsUpdateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).appAppEditionsUpdateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {UpdateIOSAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsUpdateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).appAppEditionsUpdateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsUploadAppEdition(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppEditionsApiFetchParamCreator(configuration).appAppEditionsUploadAppEdition(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AppEditionsApi - factory interface
 * @export
 */
export const AppEditionsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {VersionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsCheckUpdate(input, X_XSRF_TOKEN, authorization, options) {
            return AppEditionsApiFp(configuration).appAppEditionsCheckUpdate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {CreateAndroidAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsCreateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options) {
            return AppEditionsApiFp(configuration).appAppEditionsCreateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {CreateIOSAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsCreateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options) {
            return AppEditionsApiFp(configuration).appAppEditionsCreateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsDeleteAppEdition(input, X_XSRF_TOKEN, authorization, options) {
            return AppEditionsApiFp(configuration).appAppEditionsDeleteAppEdition(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsDownloadAppEdition(id, X_XSRF_TOKEN, authorization, options) {
            return AppEditionsApiFp(configuration).appAppEditionsDownloadAppEdition(id, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {VersionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsGetAbout(input, X_XSRF_TOKEN, authorization, options) {
            return AppEditionsApiFp(configuration).appAppEditionsGetAbout(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {VersionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsGetAboutAndCheckUpdate(input, X_XSRF_TOKEN, authorization, options) {
            return AppEditionsApiFp(configuration).appAppEditionsGetAboutAndCheckUpdate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {GetAppEditionsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsGetAppEditions(input, X_XSRF_TOKEN, authorization, options) {
            return AppEditionsApiFp(configuration).appAppEditionsGetAppEditions(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {UpdateAndroidAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsUpdateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options) {
            return AppEditionsApiFp(configuration).appAppEditionsUpdateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {UpdateIOSAppEditionInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsUpdateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options) {
            return AppEditionsApiFp(configuration).appAppEditionsUpdateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppEditionsUploadAppEdition(X_XSRF_TOKEN, authorization, options) {
            return AppEditionsApiFp(configuration).appAppEditionsUploadAppEdition(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * AppEditionsApi - object-oriented interface
 * @export
 * @class AppEditionsApi
 * @extends {BaseAPI}
 */
export class AppEditionsApi extends BaseAPI {
    /**
     *
     * @param {VersionInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    appAppEditionsCheckUpdate(input, X_XSRF_TOKEN, authorization, options) {
        return AppEditionsApiFp(this.configuration).appAppEditionsCheckUpdate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {CreateAndroidAppEditionInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    appAppEditionsCreateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options) {
        return AppEditionsApiFp(this.configuration).appAppEditionsCreateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {CreateIOSAppEditionInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    appAppEditionsCreateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options) {
        return AppEditionsApiFp(this.configuration).appAppEditionsCreateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {EntityDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    appAppEditionsDeleteAppEdition(input, X_XSRF_TOKEN, authorization, options) {
        return AppEditionsApiFp(this.configuration).appAppEditionsDeleteAppEdition(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {number} id
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    appAppEditionsDownloadAppEdition(id, X_XSRF_TOKEN, authorization, options) {
        return AppEditionsApiFp(this.configuration).appAppEditionsDownloadAppEdition(id, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {VersionInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    appAppEditionsGetAbout(input, X_XSRF_TOKEN, authorization, options) {
        return AppEditionsApiFp(this.configuration).appAppEditionsGetAbout(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {VersionInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    appAppEditionsGetAboutAndCheckUpdate(input, X_XSRF_TOKEN, authorization, options) {
        return AppEditionsApiFp(this.configuration).appAppEditionsGetAboutAndCheckUpdate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {GetAppEditionsInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    appAppEditionsGetAppEditions(input, X_XSRF_TOKEN, authorization, options) {
        return AppEditionsApiFp(this.configuration).appAppEditionsGetAppEditions(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {UpdateAndroidAppEditionInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    appAppEditionsUpdateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options) {
        return AppEditionsApiFp(this.configuration).appAppEditionsUpdateAndroidAppEdition(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {UpdateIOSAppEditionInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    appAppEditionsUpdateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options) {
        return AppEditionsApiFp(this.configuration).appAppEditionsUpdateIOSAppEdition(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppEditionsApi
     */
    appAppEditionsUploadAppEdition(X_XSRF_TOKEN, authorization, options) {
        return AppEditionsApiFp(this.configuration).appAppEditionsUploadAppEdition(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * AppStartPageApi - fetch parameter creator
 * @export
 */
export const AppStartPageApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {CreateAppStartPageDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageCreate(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppStartPageCreate.');
            }
            const localVarPath = `/api/services/app/appStartPage/Create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CreateAppStartPageDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageDelete(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppStartPageDelete.');
            }
            const localVarPath = `/api/services/app/appStartPage/Delete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 批量删除
         * @param {ArrayDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageDeleteBatch(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppStartPageDeleteBatch.');
            }
            const localVarPath = `/api/services/app/appStartPage/DeleteBatch`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ArrayDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageGet(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppStartPageGet.');
            }
            const localVarPath = `/api/services/app/appStartPage/Get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageGetAll(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppStartPageGetAll.');
            }
            const localVarPath = `/api/services/app/appStartPage/GetAll`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("PagedSortedAndFilteredInputDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary App端： 获取图片
         * @param {GetAppStartPageInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageGetAppStartPage(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppStartPageGetAppStartPage.');
            }
            const localVarPath = `/api/services/app/appStartPage/GetAppStartPage`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("GetAppStartPageInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary App端： 检查图片是否有更新
         * @param {IsUpatedInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageIsUpdated(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppStartPageIsUpdated.');
            }
            const localVarPath = `/api/services/app/appStartPage/IsUpdated`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("IsUpatedInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {UpdateAppStartPageDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageUpdate(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAppStartPageUpdate.');
            }
            const localVarPath = `/api/services/app/appStartPage/Update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UpdateAppStartPageDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AppStartPageApi - functional programming interface
 * @export
 */
export const AppStartPageApiFp = function (configuration) {
    return {
        /**
         *
         * @param {CreateAppStartPageDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageCreate(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppStartPageApiFetchParamCreator(configuration).appAppStartPageCreate(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageDelete(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppStartPageApiFetchParamCreator(configuration).appAppStartPageDelete(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 批量删除
         * @param {ArrayDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageDeleteBatch(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppStartPageApiFetchParamCreator(configuration).appAppStartPageDeleteBatch(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageGet(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppStartPageApiFetchParamCreator(configuration).appAppStartPageGet(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageGetAll(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppStartPageApiFetchParamCreator(configuration).appAppStartPageGetAll(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary App端： 获取图片
         * @param {GetAppStartPageInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageGetAppStartPage(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppStartPageApiFetchParamCreator(configuration).appAppStartPageGetAppStartPage(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary App端： 检查图片是否有更新
         * @param {IsUpatedInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageIsUpdated(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppStartPageApiFetchParamCreator(configuration).appAppStartPageIsUpdated(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {UpdateAppStartPageDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageUpdate(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AppStartPageApiFetchParamCreator(configuration).appAppStartPageUpdate(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AppStartPageApi - factory interface
 * @export
 */
export const AppStartPageApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {CreateAppStartPageDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageCreate(input, X_XSRF_TOKEN, authorization, options) {
            return AppStartPageApiFp(configuration).appAppStartPageCreate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageDelete(input, X_XSRF_TOKEN, authorization, options) {
            return AppStartPageApiFp(configuration).appAppStartPageDelete(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 批量删除
         * @param {ArrayDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageDeleteBatch(input, X_XSRF_TOKEN, authorization, options) {
            return AppStartPageApiFp(configuration).appAppStartPageDeleteBatch(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageGet(input, X_XSRF_TOKEN, authorization, options) {
            return AppStartPageApiFp(configuration).appAppStartPageGet(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageGetAll(input, X_XSRF_TOKEN, authorization, options) {
            return AppStartPageApiFp(configuration).appAppStartPageGetAll(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary App端： 获取图片
         * @param {GetAppStartPageInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageGetAppStartPage(input, X_XSRF_TOKEN, authorization, options) {
            return AppStartPageApiFp(configuration).appAppStartPageGetAppStartPage(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary App端： 检查图片是否有更新
         * @param {IsUpatedInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageIsUpdated(input, X_XSRF_TOKEN, authorization, options) {
            return AppStartPageApiFp(configuration).appAppStartPageIsUpdated(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {UpdateAppStartPageDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAppStartPageUpdate(input, X_XSRF_TOKEN, authorization, options) {
            return AppStartPageApiFp(configuration).appAppStartPageUpdate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * AppStartPageApi - object-oriented interface
 * @export
 * @class AppStartPageApi
 * @extends {BaseAPI}
 */
export class AppStartPageApi extends BaseAPI {
    /**
     *
     * @param {CreateAppStartPageDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    appAppStartPageCreate(input, X_XSRF_TOKEN, authorization, options) {
        return AppStartPageApiFp(this.configuration).appAppStartPageCreate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {EntityDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    appAppStartPageDelete(input, X_XSRF_TOKEN, authorization, options) {
        return AppStartPageApiFp(this.configuration).appAppStartPageDelete(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 批量删除
     * @param {ArrayDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    appAppStartPageDeleteBatch(input, X_XSRF_TOKEN, authorization, options) {
        return AppStartPageApiFp(this.configuration).appAppStartPageDeleteBatch(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {EntityDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    appAppStartPageGet(input, X_XSRF_TOKEN, authorization, options) {
        return AppStartPageApiFp(this.configuration).appAppStartPageGet(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {PagedSortedAndFilteredInputDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    appAppStartPageGetAll(input, X_XSRF_TOKEN, authorization, options) {
        return AppStartPageApiFp(this.configuration).appAppStartPageGetAll(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary App端： 获取图片
     * @param {GetAppStartPageInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    appAppStartPageGetAppStartPage(input, X_XSRF_TOKEN, authorization, options) {
        return AppStartPageApiFp(this.configuration).appAppStartPageGetAppStartPage(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary App端： 检查图片是否有更新
     * @param {IsUpatedInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    appAppStartPageIsUpdated(input, X_XSRF_TOKEN, authorization, options) {
        return AppStartPageApiFp(this.configuration).appAppStartPageIsUpdated(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {UpdateAppStartPageDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppStartPageApi
     */
    appAppStartPageUpdate(input, X_XSRF_TOKEN, authorization, options) {
        return AppStartPageApiFp(this.configuration).appAppStartPageUpdate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * AuditLogApi - fetch parameter creator
 * @export
 */
export const AuditLogApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {GetAuditLogsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAuditLogGetAuditLogs(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAuditLogGetAuditLogs.');
            }
            const localVarPath = `/api/services/app/auditLog/GetAuditLogs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("GetAuditLogsInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {GetAuditLogsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAuditLogGetAuditLogsToExcel(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appAuditLogGetAuditLogsToExcel.');
            }
            const localVarPath = `/api/services/app/auditLog/GetAuditLogsToExcel`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("GetAuditLogsInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AuditLogApi - functional programming interface
 * @export
 */
export const AuditLogApiFp = function (configuration) {
    return {
        /**
         *
         * @param {GetAuditLogsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAuditLogGetAuditLogs(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AuditLogApiFetchParamCreator(configuration).appAuditLogGetAuditLogs(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {GetAuditLogsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAuditLogGetAuditLogsToExcel(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = AuditLogApiFetchParamCreator(configuration).appAuditLogGetAuditLogsToExcel(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AuditLogApi - factory interface
 * @export
 */
export const AuditLogApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {GetAuditLogsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAuditLogGetAuditLogs(input, X_XSRF_TOKEN, authorization, options) {
            return AuditLogApiFp(configuration).appAuditLogGetAuditLogs(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {GetAuditLogsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appAuditLogGetAuditLogsToExcel(input, X_XSRF_TOKEN, authorization, options) {
            return AuditLogApiFp(configuration).appAuditLogGetAuditLogsToExcel(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * AuditLogApi - object-oriented interface
 * @export
 * @class AuditLogApi
 * @extends {BaseAPI}
 */
export class AuditLogApi extends BaseAPI {
    /**
     *
     * @param {GetAuditLogsInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    appAuditLogGetAuditLogs(input, X_XSRF_TOKEN, authorization, options) {
        return AuditLogApiFp(this.configuration).appAuditLogGetAuditLogs(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {GetAuditLogsInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogApi
     */
    appAuditLogGetAuditLogsToExcel(input, X_XSRF_TOKEN, authorization, options) {
        return AuditLogApiFp(this.configuration).appAuditLogGetAuditLogsToExcel(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * ChatApi - fetch parameter creator
 * @export
 */
export const ChatApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appChatGetUserChatFriendsWithSettings(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/chat/GetUserChatFriendsWithSettings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {GetUserChatMessagesInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appChatGetUserChatMessages(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appChatGetUserChatMessages.');
            }
            const localVarPath = `/api/services/app/chat/GetUserChatMessages`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("GetUserChatMessagesInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {MarkAllUnreadMessagesOfUserAsReadInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appChatMarkAllUnreadMessagesOfUserAsRead(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appChatMarkAllUnreadMessagesOfUserAsRead.');
            }
            const localVarPath = `/api/services/app/chat/MarkAllUnreadMessagesOfUserAsRead`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("MarkAllUnreadMessagesOfUserAsReadInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appChatGetUserChatFriendsWithSettings(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ChatApiFetchParamCreator(configuration).appChatGetUserChatFriendsWithSettings(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {GetUserChatMessagesInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appChatGetUserChatMessages(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ChatApiFetchParamCreator(configuration).appChatGetUserChatMessages(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {MarkAllUnreadMessagesOfUserAsReadInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appChatMarkAllUnreadMessagesOfUserAsRead(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ChatApiFetchParamCreator(configuration).appChatMarkAllUnreadMessagesOfUserAsRead(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appChatGetUserChatFriendsWithSettings(X_XSRF_TOKEN, authorization, options) {
            return ChatApiFp(configuration).appChatGetUserChatFriendsWithSettings(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {GetUserChatMessagesInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appChatGetUserChatMessages(input, X_XSRF_TOKEN, authorization, options) {
            return ChatApiFp(configuration).appChatGetUserChatMessages(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {MarkAllUnreadMessagesOfUserAsReadInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appChatMarkAllUnreadMessagesOfUserAsRead(input, X_XSRF_TOKEN, authorization, options) {
            return ChatApiFp(configuration).appChatMarkAllUnreadMessagesOfUserAsRead(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI {
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    appChatGetUserChatFriendsWithSettings(X_XSRF_TOKEN, authorization, options) {
        return ChatApiFp(this.configuration).appChatGetUserChatFriendsWithSettings(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {GetUserChatMessagesInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    appChatGetUserChatMessages(input, X_XSRF_TOKEN, authorization, options) {
        return ChatApiFp(this.configuration).appChatGetUserChatMessages(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {MarkAllUnreadMessagesOfUserAsReadInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    appChatMarkAllUnreadMessagesOfUserAsRead(input, X_XSRF_TOKEN, authorization, options) {
        return ChatApiFp(this.configuration).appChatMarkAllUnreadMessagesOfUserAsRead(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * ConfigurationApi - fetch parameter creator
 * @export
 */
export const ConfigurationApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 设置皮肤
         * @param {ChangeUiThemeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationChangeUiTheme(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appConfigurationChangeUiTheme.');
            }
            const localVarPath = `/api/services/app/configuration/ChangeUiTheme`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ChangeUiThemeInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取所有配置
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationGetAllSettings(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/configuration/GetAllSettings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取客户端设置
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationGetClientSetting(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/configuration/GetClientSetting`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取用户设置的皮肤
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationGetUiTheme(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/configuration/GetUiTheme`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 更新所有配置
         * @param {any} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationUpdateAllSettings(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appConfigurationUpdateAllSettings.');
            }
            const localVarPath = `/api/services/app/configuration/UpdateAllSettings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ConfigurationApi - functional programming interface
 * @export
 */
export const ConfigurationApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 设置皮肤
         * @param {ChangeUiThemeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationChangeUiTheme(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ConfigurationApiFetchParamCreator(configuration).appConfigurationChangeUiTheme(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取所有配置
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationGetAllSettings(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ConfigurationApiFetchParamCreator(configuration).appConfigurationGetAllSettings(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取客户端设置
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationGetClientSetting(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ConfigurationApiFetchParamCreator(configuration).appConfigurationGetClientSetting(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取用户设置的皮肤
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationGetUiTheme(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ConfigurationApiFetchParamCreator(configuration).appConfigurationGetUiTheme(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 更新所有配置
         * @param {any} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationUpdateAllSettings(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ConfigurationApiFetchParamCreator(configuration).appConfigurationUpdateAllSettings(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ConfigurationApi - factory interface
 * @export
 */
export const ConfigurationApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 设置皮肤
         * @param {ChangeUiThemeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationChangeUiTheme(input, X_XSRF_TOKEN, authorization, options) {
            return ConfigurationApiFp(configuration).appConfigurationChangeUiTheme(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取所有配置
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationGetAllSettings(X_XSRF_TOKEN, authorization, options) {
            return ConfigurationApiFp(configuration).appConfigurationGetAllSettings(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取客户端设置
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationGetClientSetting(X_XSRF_TOKEN, authorization, options) {
            return ConfigurationApiFp(configuration).appConfigurationGetClientSetting(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取用户设置的皮肤
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationGetUiTheme(X_XSRF_TOKEN, authorization, options) {
            return ConfigurationApiFp(configuration).appConfigurationGetUiTheme(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 更新所有配置
         * @param {any} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appConfigurationUpdateAllSettings(input, X_XSRF_TOKEN, authorization, options) {
            return ConfigurationApiFp(configuration).appConfigurationUpdateAllSettings(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * ConfigurationApi - object-oriented interface
 * @export
 * @class ConfigurationApi
 * @extends {BaseAPI}
 */
export class ConfigurationApi extends BaseAPI {
    /**
     *
     * @summary 设置皮肤
     * @param {ChangeUiThemeInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    appConfigurationChangeUiTheme(input, X_XSRF_TOKEN, authorization, options) {
        return ConfigurationApiFp(this.configuration).appConfigurationChangeUiTheme(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取所有配置
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    appConfigurationGetAllSettings(X_XSRF_TOKEN, authorization, options) {
        return ConfigurationApiFp(this.configuration).appConfigurationGetAllSettings(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取客户端设置
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    appConfigurationGetClientSetting(X_XSRF_TOKEN, authorization, options) {
        return ConfigurationApiFp(this.configuration).appConfigurationGetClientSetting(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取用户设置的皮肤
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    appConfigurationGetUiTheme(X_XSRF_TOKEN, authorization, options) {
        return ConfigurationApiFp(this.configuration).appConfigurationGetUiTheme(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 更新所有配置
     * @param {any} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    appConfigurationUpdateAllSettings(input, X_XSRF_TOKEN, authorization, options) {
        return ConfigurationApiFp(this.configuration).appConfigurationUpdateAllSettings(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * DemoApi - fetch parameter creator
 * @export
 */
export const DemoApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {CreateDemoDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoCreate(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appDemoCreate.');
            }
            const localVarPath = `/api/services/app/demo/Create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CreateDemoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoDelete(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appDemoDelete.');
            }
            const localVarPath = `/api/services/app/demo/Delete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoGet(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appDemoGet.');
            }
            const localVarPath = `/api/services/app/demo/Get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoGetAll(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appDemoGetAll.');
            }
            const localVarPath = `/api/services/app/demo/GetAll`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("PagedSortedAndFilteredInputDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {UpdateDemoDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoUpdate(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appDemoUpdate.');
            }
            const localVarPath = `/api/services/app/demo/Update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UpdateDemoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DemoApi - functional programming interface
 * @export
 */
export const DemoApiFp = function (configuration) {
    return {
        /**
         *
         * @param {CreateDemoDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoCreate(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = DemoApiFetchParamCreator(configuration).appDemoCreate(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoDelete(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = DemoApiFetchParamCreator(configuration).appDemoDelete(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoGet(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = DemoApiFetchParamCreator(configuration).appDemoGet(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoGetAll(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = DemoApiFetchParamCreator(configuration).appDemoGetAll(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {UpdateDemoDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoUpdate(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = DemoApiFetchParamCreator(configuration).appDemoUpdate(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * DemoApi - factory interface
 * @export
 */
export const DemoApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {CreateDemoDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoCreate(input, X_XSRF_TOKEN, authorization, options) {
            return DemoApiFp(configuration).appDemoCreate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoDelete(input, X_XSRF_TOKEN, authorization, options) {
            return DemoApiFp(configuration).appDemoDelete(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoGet(input, X_XSRF_TOKEN, authorization, options) {
            return DemoApiFp(configuration).appDemoGet(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoGetAll(input, X_XSRF_TOKEN, authorization, options) {
            return DemoApiFp(configuration).appDemoGetAll(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {UpdateDemoDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDemoUpdate(input, X_XSRF_TOKEN, authorization, options) {
            return DemoApiFp(configuration).appDemoUpdate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * DemoApi - object-oriented interface
 * @export
 * @class DemoApi
 * @extends {BaseAPI}
 */
export class DemoApi extends BaseAPI {
    /**
     *
     * @param {CreateDemoDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    appDemoCreate(input, X_XSRF_TOKEN, authorization, options) {
        return DemoApiFp(this.configuration).appDemoCreate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {EntityDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    appDemoDelete(input, X_XSRF_TOKEN, authorization, options) {
        return DemoApiFp(this.configuration).appDemoDelete(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {EntityDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    appDemoGet(input, X_XSRF_TOKEN, authorization, options) {
        return DemoApiFp(this.configuration).appDemoGet(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {PagedSortedAndFilteredInputDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    appDemoGetAll(input, X_XSRF_TOKEN, authorization, options) {
        return DemoApiFp(this.configuration).appDemoGetAll(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {UpdateDemoDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoApi
     */
    appDemoUpdate(input, X_XSRF_TOKEN, authorization, options) {
        return DemoApiFp(this.configuration).appDemoUpdate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * DragVerificationApi - fetch parameter creator
 * @export
 */
export const DragVerificationApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {CheckCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDragVerificationCheckCode(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appDragVerificationCheckCode.');
            }
            const localVarPath = `/api/services/app/dragVerification/CheckCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CheckCodeInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDragVerificationGetDragVerificationCode(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/dragVerification/GetDragVerificationCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DragVerificationApi - functional programming interface
 * @export
 */
export const DragVerificationApiFp = function (configuration) {
    return {
        /**
         *
         * @param {CheckCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDragVerificationCheckCode(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = DragVerificationApiFetchParamCreator(configuration).appDragVerificationCheckCode(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDragVerificationGetDragVerificationCode(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = DragVerificationApiFetchParamCreator(configuration).appDragVerificationGetDragVerificationCode(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * DragVerificationApi - factory interface
 * @export
 */
export const DragVerificationApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {CheckCodeInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDragVerificationCheckCode(input, X_XSRF_TOKEN, authorization, options) {
            return DragVerificationApiFp(configuration).appDragVerificationCheckCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDragVerificationGetDragVerificationCode(X_XSRF_TOKEN, authorization, options) {
            return DragVerificationApiFp(configuration).appDragVerificationGetDragVerificationCode(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * DragVerificationApi - object-oriented interface
 * @export
 * @class DragVerificationApi
 * @extends {BaseAPI}
 */
export class DragVerificationApi extends BaseAPI {
    /**
     *
     * @param {CheckCodeInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DragVerificationApi
     */
    appDragVerificationCheckCode(input, X_XSRF_TOKEN, authorization, options) {
        return DragVerificationApiFp(this.configuration).appDragVerificationCheckCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DragVerificationApi
     */
    appDragVerificationGetDragVerificationCode(X_XSRF_TOKEN, authorization, options) {
        return DragVerificationApiFp(this.configuration).appDragVerificationGetDragVerificationCode(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * FileSettingDemoApi - fetch parameter creator
 * @export
 */
export const FileSettingDemoApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 获取内容
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFileSettingDemoGet(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/fileSettingDemo/Get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 修改内容
         * @param {SetFileSettingDemoDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFileSettingDemoSet(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appFileSettingDemoSet.');
            }
            const localVarPath = `/api/services/app/fileSettingDemo/Set`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("SetFileSettingDemoDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * FileSettingDemoApi - functional programming interface
 * @export
 */
export const FileSettingDemoApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 获取内容
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFileSettingDemoGet(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = FileSettingDemoApiFetchParamCreator(configuration).appFileSettingDemoGet(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 修改内容
         * @param {SetFileSettingDemoDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFileSettingDemoSet(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = FileSettingDemoApiFetchParamCreator(configuration).appFileSettingDemoSet(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * FileSettingDemoApi - factory interface
 * @export
 */
export const FileSettingDemoApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 获取内容
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFileSettingDemoGet(X_XSRF_TOKEN, authorization, options) {
            return FileSettingDemoApiFp(configuration).appFileSettingDemoGet(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 修改内容
         * @param {SetFileSettingDemoDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFileSettingDemoSet(input, X_XSRF_TOKEN, authorization, options) {
            return FileSettingDemoApiFp(configuration).appFileSettingDemoSet(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * FileSettingDemoApi - object-oriented interface
 * @export
 * @class FileSettingDemoApi
 * @extends {BaseAPI}
 */
export class FileSettingDemoApi extends BaseAPI {
    /**
     *
     * @summary 获取内容
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileSettingDemoApi
     */
    appFileSettingDemoGet(X_XSRF_TOKEN, authorization, options) {
        return FileSettingDemoApiFp(this.configuration).appFileSettingDemoGet(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 修改内容
     * @param {SetFileSettingDemoDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileSettingDemoApi
     */
    appFileSettingDemoSet(input, X_XSRF_TOKEN, authorization, options) {
        return FileSettingDemoApiFp(this.configuration).appFileSettingDemoSet(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * FriendshipApi - fetch parameter creator
 * @export
 */
export const FriendshipApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {AcceptFriendshipRequestInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipAcceptFriendshipRequest(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appFriendshipAcceptFriendshipRequest.');
            }
            const localVarPath = `/api/services/app/friendship/AcceptFriendshipRequest`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("AcceptFriendshipRequestInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {Array<CreateFriendshipRequestInput>} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipBatchCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appFriendshipBatchCreateFriendshipRequest.');
            }
            const localVarPath = `/api/services/app/friendship/BatchCreateFriendshipRequest`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("Array&lt;CreateFriendshipRequestInput&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {BlockUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipBlockUser(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appFriendshipBlockUser.');
            }
            const localVarPath = `/api/services/app/friendship/BlockUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("BlockUserInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {CreateFriendshipRequestInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appFriendshipCreateFriendshipRequest.');
            }
            const localVarPath = `/api/services/app/friendship/CreateFriendshipRequest`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CreateFriendshipRequestInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {CreateFriendshipRequestByUserNameInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipCreateFriendshipRequestByUserName(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appFriendshipCreateFriendshipRequestByUserName.');
            }
            const localVarPath = `/api/services/app/friendship/CreateFriendshipRequestByUserName`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CreateFriendshipRequestByUserNameInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {PagedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipGetCreateFriendshipUserList(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appFriendshipGetCreateFriendshipUserList.');
            }
            const localVarPath = `/api/services/app/friendship/GetCreateFriendshipUserList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("PagedAndFilteredInputDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {UnblockUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipUnblockUser(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appFriendshipUnblockUser.');
            }
            const localVarPath = `/api/services/app/friendship/UnblockUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UnblockUserInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * FriendshipApi - functional programming interface
 * @export
 */
export const FriendshipApiFp = function (configuration) {
    return {
        /**
         *
         * @param {AcceptFriendshipRequestInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipAcceptFriendshipRequest(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = FriendshipApiFetchParamCreator(configuration).appFriendshipAcceptFriendshipRequest(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {Array<CreateFriendshipRequestInput>} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipBatchCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = FriendshipApiFetchParamCreator(configuration).appFriendshipBatchCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {BlockUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipBlockUser(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = FriendshipApiFetchParamCreator(configuration).appFriendshipBlockUser(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {CreateFriendshipRequestInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = FriendshipApiFetchParamCreator(configuration).appFriendshipCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {CreateFriendshipRequestByUserNameInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipCreateFriendshipRequestByUserName(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = FriendshipApiFetchParamCreator(configuration).appFriendshipCreateFriendshipRequestByUserName(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {PagedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipGetCreateFriendshipUserList(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = FriendshipApiFetchParamCreator(configuration).appFriendshipGetCreateFriendshipUserList(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {UnblockUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipUnblockUser(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = FriendshipApiFetchParamCreator(configuration).appFriendshipUnblockUser(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * FriendshipApi - factory interface
 * @export
 */
export const FriendshipApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {AcceptFriendshipRequestInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipAcceptFriendshipRequest(input, X_XSRF_TOKEN, authorization, options) {
            return FriendshipApiFp(configuration).appFriendshipAcceptFriendshipRequest(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {Array<CreateFriendshipRequestInput>} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipBatchCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options) {
            return FriendshipApiFp(configuration).appFriendshipBatchCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {BlockUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipBlockUser(input, X_XSRF_TOKEN, authorization, options) {
            return FriendshipApiFp(configuration).appFriendshipBlockUser(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {CreateFriendshipRequestInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options) {
            return FriendshipApiFp(configuration).appFriendshipCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {CreateFriendshipRequestByUserNameInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipCreateFriendshipRequestByUserName(input, X_XSRF_TOKEN, authorization, options) {
            return FriendshipApiFp(configuration).appFriendshipCreateFriendshipRequestByUserName(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {PagedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipGetCreateFriendshipUserList(input, X_XSRF_TOKEN, authorization, options) {
            return FriendshipApiFp(configuration).appFriendshipGetCreateFriendshipUserList(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {UnblockUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appFriendshipUnblockUser(input, X_XSRF_TOKEN, authorization, options) {
            return FriendshipApiFp(configuration).appFriendshipUnblockUser(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * FriendshipApi - object-oriented interface
 * @export
 * @class FriendshipApi
 * @extends {BaseAPI}
 */
export class FriendshipApi extends BaseAPI {
    /**
     *
     * @param {AcceptFriendshipRequestInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    appFriendshipAcceptFriendshipRequest(input, X_XSRF_TOKEN, authorization, options) {
        return FriendshipApiFp(this.configuration).appFriendshipAcceptFriendshipRequest(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {Array<CreateFriendshipRequestInput>} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    appFriendshipBatchCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options) {
        return FriendshipApiFp(this.configuration).appFriendshipBatchCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {BlockUserInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    appFriendshipBlockUser(input, X_XSRF_TOKEN, authorization, options) {
        return FriendshipApiFp(this.configuration).appFriendshipBlockUser(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {CreateFriendshipRequestInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    appFriendshipCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options) {
        return FriendshipApiFp(this.configuration).appFriendshipCreateFriendshipRequest(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {CreateFriendshipRequestByUserNameInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    appFriendshipCreateFriendshipRequestByUserName(input, X_XSRF_TOKEN, authorization, options) {
        return FriendshipApiFp(this.configuration).appFriendshipCreateFriendshipRequestByUserName(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {PagedAndFilteredInputDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    appFriendshipGetCreateFriendshipUserList(input, X_XSRF_TOKEN, authorization, options) {
        return FriendshipApiFp(this.configuration).appFriendshipGetCreateFriendshipUserList(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {UnblockUserInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipApi
     */
    appFriendshipUnblockUser(input, X_XSRF_TOKEN, authorization, options) {
        return FriendshipApiFp(this.configuration).appFriendshipUnblockUser(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * GeetestApi - fetch parameter creator
 * @export
 */
export const GeetestApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {GeetestAppCheckInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestAPPCheck(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appGeetestAPPCheck.');
            }
            const localVarPath = `/api/services/app/geetest/APPCheck`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("GeetestAppCheckInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestAPPGetCaptcha(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/geetest/APPGetCaptcha`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {GeetestCheckInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestCheck(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appGeetestCheck.');
            }
            const localVarPath = `/api/services/app/geetest/Check`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("GeetestCheckInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestGetCaptcha(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/geetest/GetCaptcha`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * GeetestApi - functional programming interface
 * @export
 */
export const GeetestApiFp = function (configuration) {
    return {
        /**
         *
         * @param {GeetestAppCheckInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestAPPCheck(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = GeetestApiFetchParamCreator(configuration).appGeetestAPPCheck(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestAPPGetCaptcha(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = GeetestApiFetchParamCreator(configuration).appGeetestAPPGetCaptcha(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {GeetestCheckInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestCheck(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = GeetestApiFetchParamCreator(configuration).appGeetestCheck(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestGetCaptcha(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = GeetestApiFetchParamCreator(configuration).appGeetestGetCaptcha(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * GeetestApi - factory interface
 * @export
 */
export const GeetestApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {GeetestAppCheckInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestAPPCheck(input, X_XSRF_TOKEN, authorization, options) {
            return GeetestApiFp(configuration).appGeetestAPPCheck(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestAPPGetCaptcha(X_XSRF_TOKEN, authorization, options) {
            return GeetestApiFp(configuration).appGeetestAPPGetCaptcha(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {GeetestCheckInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestCheck(input, X_XSRF_TOKEN, authorization, options) {
            return GeetestApiFp(configuration).appGeetestCheck(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appGeetestGetCaptcha(X_XSRF_TOKEN, authorization, options) {
            return GeetestApiFp(configuration).appGeetestGetCaptcha(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * GeetestApi - object-oriented interface
 * @export
 * @class GeetestApi
 * @extends {BaseAPI}
 */
export class GeetestApi extends BaseAPI {
    /**
     *
     * @param {GeetestAppCheckInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeetestApi
     */
    appGeetestAPPCheck(input, X_XSRF_TOKEN, authorization, options) {
        return GeetestApiFp(this.configuration).appGeetestAPPCheck(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeetestApi
     */
    appGeetestAPPGetCaptcha(X_XSRF_TOKEN, authorization, options) {
        return GeetestApiFp(this.configuration).appGeetestAPPGetCaptcha(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {GeetestCheckInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeetestApi
     */
    appGeetestCheck(input, X_XSRF_TOKEN, authorization, options) {
        return GeetestApiFp(this.configuration).appGeetestCheck(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeetestApi
     */
    appGeetestGetCaptcha(X_XSRF_TOKEN, authorization, options) {
        return GeetestApiFp(this.configuration).appGeetestGetCaptcha(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * InterfaceExportApi - fetch parameter creator
 * @export
 */
export const InterfaceExportApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 导出React使用的TypeScript文件
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appInterfaceExportGetReactDownloadUrl(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/interfaceExport/GetReactDownloadUrl`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * InterfaceExportApi - functional programming interface
 * @export
 */
export const InterfaceExportApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 导出React使用的TypeScript文件
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appInterfaceExportGetReactDownloadUrl(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = InterfaceExportApiFetchParamCreator(configuration).appInterfaceExportGetReactDownloadUrl(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * InterfaceExportApi - factory interface
 * @export
 */
export const InterfaceExportApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 导出React使用的TypeScript文件
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appInterfaceExportGetReactDownloadUrl(X_XSRF_TOKEN, authorization, options) {
            return InterfaceExportApiFp(configuration).appInterfaceExportGetReactDownloadUrl(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * InterfaceExportApi - object-oriented interface
 * @export
 * @class InterfaceExportApi
 * @extends {BaseAPI}
 */
export class InterfaceExportApi extends BaseAPI {
    /**
     *
     * @summary 导出React使用的TypeScript文件
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InterfaceExportApi
     */
    appInterfaceExportGetReactDownloadUrl(X_XSRF_TOKEN, authorization, options) {
        return InterfaceExportApiFp(this.configuration).appInterfaceExportGetReactDownloadUrl(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * MenuApi - fetch parameter creator
 * @export
 */
export const MenuApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 创建用户自定义菜单
         * @param {CreateMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuCreateCustomMenu(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMenuCreateCustomMenu.');
            }
            const localVarPath = `/api/services/app/menu/CreateCustomMenu`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CreateMenuInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 创建系统菜单，开发人员使用
         * @param {CreateMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuCreateSystemMenu(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMenuCreateSystemMenu.');
            }
            const localVarPath = `/api/services/app/menu/CreateSystemMenu`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CreateMenuInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 删除菜单
         * @param {DeleteMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuDeleteMenu(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMenuDeleteMenu.');
            }
            const localVarPath = `/api/services/app/menu/DeleteMenu`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("DeleteMenuInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取菜单及权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuGetAllMenus(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/menu/GetAllMenus`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取菜单及权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuGetUserMenus(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/menu/GetUserMenus`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 移动菜单
         * @param {MoveMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuMoveMenu(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMenuMoveMenu.');
            }
            const localVarPath = `/api/services/app/menu/MoveMenu`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("MoveMenuInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 更新菜单
         * @param {UpdateMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuUpdateMenu(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMenuUpdateMenu.');
            }
            const localVarPath = `/api/services/app/menu/UpdateMenu`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UpdateMenuInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MenuApi - functional programming interface
 * @export
 */
export const MenuApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 创建用户自定义菜单
         * @param {CreateMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuCreateCustomMenu(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MenuApiFetchParamCreator(configuration).appMenuCreateCustomMenu(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 创建系统菜单，开发人员使用
         * @param {CreateMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuCreateSystemMenu(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MenuApiFetchParamCreator(configuration).appMenuCreateSystemMenu(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 删除菜单
         * @param {DeleteMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuDeleteMenu(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MenuApiFetchParamCreator(configuration).appMenuDeleteMenu(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取菜单及权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuGetAllMenus(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MenuApiFetchParamCreator(configuration).appMenuGetAllMenus(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取菜单及权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuGetUserMenus(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MenuApiFetchParamCreator(configuration).appMenuGetUserMenus(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 移动菜单
         * @param {MoveMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuMoveMenu(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MenuApiFetchParamCreator(configuration).appMenuMoveMenu(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 更新菜单
         * @param {UpdateMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuUpdateMenu(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MenuApiFetchParamCreator(configuration).appMenuUpdateMenu(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * MenuApi - factory interface
 * @export
 */
export const MenuApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 创建用户自定义菜单
         * @param {CreateMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuCreateCustomMenu(input, X_XSRF_TOKEN, authorization, options) {
            return MenuApiFp(configuration).appMenuCreateCustomMenu(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 创建系统菜单，开发人员使用
         * @param {CreateMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuCreateSystemMenu(input, X_XSRF_TOKEN, authorization, options) {
            return MenuApiFp(configuration).appMenuCreateSystemMenu(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 删除菜单
         * @param {DeleteMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuDeleteMenu(input, X_XSRF_TOKEN, authorization, options) {
            return MenuApiFp(configuration).appMenuDeleteMenu(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取菜单及权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuGetAllMenus(X_XSRF_TOKEN, authorization, options) {
            return MenuApiFp(configuration).appMenuGetAllMenus(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取菜单及权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuGetUserMenus(X_XSRF_TOKEN, authorization, options) {
            return MenuApiFp(configuration).appMenuGetUserMenus(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 移动菜单
         * @param {MoveMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuMoveMenu(input, X_XSRF_TOKEN, authorization, options) {
            return MenuApiFp(configuration).appMenuMoveMenu(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 更新菜单
         * @param {UpdateMenuInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMenuUpdateMenu(input, X_XSRF_TOKEN, authorization, options) {
            return MenuApiFp(configuration).appMenuUpdateMenu(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * MenuApi - object-oriented interface
 * @export
 * @class MenuApi
 * @extends {BaseAPI}
 */
export class MenuApi extends BaseAPI {
    /**
     *
     * @summary 创建用户自定义菜单
     * @param {CreateMenuInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    appMenuCreateCustomMenu(input, X_XSRF_TOKEN, authorization, options) {
        return MenuApiFp(this.configuration).appMenuCreateCustomMenu(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 创建系统菜单，开发人员使用
     * @param {CreateMenuInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    appMenuCreateSystemMenu(input, X_XSRF_TOKEN, authorization, options) {
        return MenuApiFp(this.configuration).appMenuCreateSystemMenu(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 删除菜单
     * @param {DeleteMenuInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    appMenuDeleteMenu(input, X_XSRF_TOKEN, authorization, options) {
        return MenuApiFp(this.configuration).appMenuDeleteMenu(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取菜单及权限
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    appMenuGetAllMenus(X_XSRF_TOKEN, authorization, options) {
        return MenuApiFp(this.configuration).appMenuGetAllMenus(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取菜单及权限
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    appMenuGetUserMenus(X_XSRF_TOKEN, authorization, options) {
        return MenuApiFp(this.configuration).appMenuGetUserMenus(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 移动菜单
     * @param {MoveMenuInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    appMenuMoveMenu(input, X_XSRF_TOKEN, authorization, options) {
        return MenuApiFp(this.configuration).appMenuMoveMenu(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 更新菜单
     * @param {UpdateMenuInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    appMenuUpdateMenu(input, X_XSRF_TOKEN, authorization, options) {
        return MenuApiFp(this.configuration).appMenuUpdateMenu(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * MenusApi - fetch parameter creator
 * @export
 */
export const MenusApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 获取菜单及权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menusGetMenus(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/Menus`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MenusApi - functional programming interface
 * @export
 */
export const MenusApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 获取菜单及权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menusGetMenus(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MenusApiFetchParamCreator(configuration).menusGetMenus(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * MenusApi - factory interface
 * @export
 */
export const MenusApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 获取菜单及权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menusGetMenus(X_XSRF_TOKEN, authorization, options) {
            return MenusApiFp(configuration).menusGetMenus(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * MenusApi - object-oriented interface
 * @export
 * @class MenusApi
 * @extends {BaseAPI}
 */
export class MenusApi extends BaseAPI {
    /**
     *
     * @summary 获取菜单及权限
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenusApi
     */
    menusGetMenus(X_XSRF_TOKEN, authorization, options) {
        return MenusApiFp(this.configuration).menusGetMenus(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * MessageApi - fetch parameter creator
 * @export
 */
export const MessageApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {CommitMessageInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessageCommitMessage(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMessageCommitMessage.');
            }
            const localVarPath = `/api/services/app/message/CommitMessage`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CommitMessageInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {CreateMessageDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessageCreate(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMessageCreate.');
            }
            const localVarPath = `/api/services/app/message/Create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CreateMessageDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessageDelete(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMessageDelete.');
            }
            const localVarPath = `/api/services/app/message/Delete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessageGet(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMessageGet.');
            }
            const localVarPath = `/api/services/app/message/Get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessageGetAll(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMessageGetAll.');
            }
            const localVarPath = `/api/services/app/message/GetAll`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("PagedSortedAndFilteredInputDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {UpdateMessageDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessageUpdate(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMessageUpdate.');
            }
            const localVarPath = `/api/services/app/message/Update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UpdateMessageDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MessageApi - functional programming interface
 * @export
 */
export const MessageApiFp = function (configuration) {
    return {
        /**
         *
         * @param {CommitMessageInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessageCommitMessage(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MessageApiFetchParamCreator(configuration).appMessageCommitMessage(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {CreateMessageDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessageCreate(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MessageApiFetchParamCreator(configuration).appMessageCreate(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessageDelete(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MessageApiFetchParamCreator(configuration).appMessageDelete(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessageGet(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MessageApiFetchParamCreator(configuration).appMessageGet(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessageGetAll(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MessageApiFetchParamCreator(configuration).appMessageGetAll(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {UpdateMessageDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessageUpdate(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MessageApiFetchParamCreator(configuration).appMessageUpdate(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * MessageApi - factory interface
 * @export
 */
export const MessageApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {CommitMessageInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessageCommitMessage(input, X_XSRF_TOKEN, authorization, options) {
            return MessageApiFp(configuration).appMessageCommitMessage(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {CreateMessageDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessageCreate(input, X_XSRF_TOKEN, authorization, options) {
            return MessageApiFp(configuration).appMessageCreate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessageDelete(input, X_XSRF_TOKEN, authorization, options) {
            return MessageApiFp(configuration).appMessageDelete(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessageGet(input, X_XSRF_TOKEN, authorization, options) {
            return MessageApiFp(configuration).appMessageGet(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessageGetAll(input, X_XSRF_TOKEN, authorization, options) {
            return MessageApiFp(configuration).appMessageGetAll(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {UpdateMessageDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessageUpdate(input, X_XSRF_TOKEN, authorization, options) {
            return MessageApiFp(configuration).appMessageUpdate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
export class MessageApi extends BaseAPI {
    /**
     *
     * @param {CommitMessageInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    appMessageCommitMessage(input, X_XSRF_TOKEN, authorization, options) {
        return MessageApiFp(this.configuration).appMessageCommitMessage(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {CreateMessageDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    appMessageCreate(input, X_XSRF_TOKEN, authorization, options) {
        return MessageApiFp(this.configuration).appMessageCreate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {EntityDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    appMessageDelete(input, X_XSRF_TOKEN, authorization, options) {
        return MessageApiFp(this.configuration).appMessageDelete(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {EntityDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    appMessageGet(input, X_XSRF_TOKEN, authorization, options) {
        return MessageApiFp(this.configuration).appMessageGet(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {PagedSortedAndFilteredInputDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    appMessageGetAll(input, X_XSRF_TOKEN, authorization, options) {
        return MessageApiFp(this.configuration).appMessageGetAll(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {UpdateMessageDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    appMessageUpdate(input, X_XSRF_TOKEN, authorization, options) {
        return MessageApiFp(this.configuration).appMessageUpdate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * MessagerApi - fetch parameter creator
 * @export
 */
export const MessagerApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {CreateMessagerDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessagerCreate(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMessagerCreate.');
            }
            const localVarPath = `/api/services/app/messager/Create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CreateMessagerDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessagerDelete(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMessagerDelete.');
            }
            const localVarPath = `/api/services/app/messager/Delete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessagerGet(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMessagerGet.');
            }
            const localVarPath = `/api/services/app/messager/Get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessagerGetAll(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMessagerGetAll.');
            }
            const localVarPath = `/api/services/app/messager/GetAll`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("PagedSortedAndFilteredInputDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {UpdateMessagerDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessagerUpdate(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appMessagerUpdate.');
            }
            const localVarPath = `/api/services/app/messager/Update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UpdateMessagerDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MessagerApi - functional programming interface
 * @export
 */
export const MessagerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {CreateMessagerDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessagerCreate(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MessagerApiFetchParamCreator(configuration).appMessagerCreate(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessagerDelete(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MessagerApiFetchParamCreator(configuration).appMessagerDelete(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessagerGet(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MessagerApiFetchParamCreator(configuration).appMessagerGet(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessagerGetAll(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MessagerApiFetchParamCreator(configuration).appMessagerGetAll(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {UpdateMessagerDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessagerUpdate(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = MessagerApiFetchParamCreator(configuration).appMessagerUpdate(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * MessagerApi - factory interface
 * @export
 */
export const MessagerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {CreateMessagerDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessagerCreate(input, X_XSRF_TOKEN, authorization, options) {
            return MessagerApiFp(configuration).appMessagerCreate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessagerDelete(input, X_XSRF_TOKEN, authorization, options) {
            return MessagerApiFp(configuration).appMessagerDelete(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessagerGet(input, X_XSRF_TOKEN, authorization, options) {
            return MessagerApiFp(configuration).appMessagerGet(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessagerGetAll(input, X_XSRF_TOKEN, authorization, options) {
            return MessagerApiFp(configuration).appMessagerGetAll(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {UpdateMessagerDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appMessagerUpdate(input, X_XSRF_TOKEN, authorization, options) {
            return MessagerApiFp(configuration).appMessagerUpdate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * MessagerApi - object-oriented interface
 * @export
 * @class MessagerApi
 * @extends {BaseAPI}
 */
export class MessagerApi extends BaseAPI {
    /**
     *
     * @param {CreateMessagerDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagerApi
     */
    appMessagerCreate(input, X_XSRF_TOKEN, authorization, options) {
        return MessagerApiFp(this.configuration).appMessagerCreate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {EntityDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagerApi
     */
    appMessagerDelete(input, X_XSRF_TOKEN, authorization, options) {
        return MessagerApiFp(this.configuration).appMessagerDelete(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {EntityDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagerApi
     */
    appMessagerGet(input, X_XSRF_TOKEN, authorization, options) {
        return MessagerApiFp(this.configuration).appMessagerGet(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {PagedSortedAndFilteredInputDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagerApi
     */
    appMessagerGetAll(input, X_XSRF_TOKEN, authorization, options) {
        return MessagerApiFp(this.configuration).appMessagerGetAll(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {UpdateMessagerDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagerApi
     */
    appMessagerUpdate(input, X_XSRF_TOKEN, authorization, options) {
        return MessagerApiFp(this.configuration).appMessagerUpdate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * NoticeApi - fetch parameter creator
 * @export
 */
export const NoticeApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {CreateNoticeDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNoticeCreate(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appNoticeCreate.');
            }
            const localVarPath = `/api/services/app/notice/Create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CreateNoticeDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNoticeDelete(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appNoticeDelete.');
            }
            const localVarPath = `/api/services/app/notice/Delete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNoticeGet(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appNoticeGet.');
            }
            const localVarPath = `/api/services/app/notice/Get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNoticeGetAll(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appNoticeGetAll.');
            }
            const localVarPath = `/api/services/app/notice/GetAll`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("PagedSortedAndFilteredInputDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNoticeGetUsingNotice(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/notice/GetUsingNotice`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {UpdateNoticeDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNoticeUpdate(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appNoticeUpdate.');
            }
            const localVarPath = `/api/services/app/notice/Update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UpdateNoticeDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * NoticeApi - functional programming interface
 * @export
 */
export const NoticeApiFp = function (configuration) {
    return {
        /**
         *
         * @param {CreateNoticeDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNoticeCreate(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = NoticeApiFetchParamCreator(configuration).appNoticeCreate(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNoticeDelete(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = NoticeApiFetchParamCreator(configuration).appNoticeDelete(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNoticeGet(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = NoticeApiFetchParamCreator(configuration).appNoticeGet(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNoticeGetAll(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = NoticeApiFetchParamCreator(configuration).appNoticeGetAll(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNoticeGetUsingNotice(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = NoticeApiFetchParamCreator(configuration).appNoticeGetUsingNotice(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {UpdateNoticeDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNoticeUpdate(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = NoticeApiFetchParamCreator(configuration).appNoticeUpdate(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * NoticeApi - factory interface
 * @export
 */
export const NoticeApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {CreateNoticeDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNoticeCreate(input, X_XSRF_TOKEN, authorization, options) {
            return NoticeApiFp(configuration).appNoticeCreate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNoticeDelete(input, X_XSRF_TOKEN, authorization, options) {
            return NoticeApiFp(configuration).appNoticeDelete(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNoticeGet(input, X_XSRF_TOKEN, authorization, options) {
            return NoticeApiFp(configuration).appNoticeGet(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNoticeGetAll(input, X_XSRF_TOKEN, authorization, options) {
            return NoticeApiFp(configuration).appNoticeGetAll(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNoticeGetUsingNotice(X_XSRF_TOKEN, authorization, options) {
            return NoticeApiFp(configuration).appNoticeGetUsingNotice(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {UpdateNoticeDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNoticeUpdate(input, X_XSRF_TOKEN, authorization, options) {
            return NoticeApiFp(configuration).appNoticeUpdate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * NoticeApi - object-oriented interface
 * @export
 * @class NoticeApi
 * @extends {BaseAPI}
 */
export class NoticeApi extends BaseAPI {
    /**
     *
     * @param {CreateNoticeDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoticeApi
     */
    appNoticeCreate(input, X_XSRF_TOKEN, authorization, options) {
        return NoticeApiFp(this.configuration).appNoticeCreate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {EntityDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoticeApi
     */
    appNoticeDelete(input, X_XSRF_TOKEN, authorization, options) {
        return NoticeApiFp(this.configuration).appNoticeDelete(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {EntityDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoticeApi
     */
    appNoticeGet(input, X_XSRF_TOKEN, authorization, options) {
        return NoticeApiFp(this.configuration).appNoticeGet(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {PagedSortedAndFilteredInputDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoticeApi
     */
    appNoticeGetAll(input, X_XSRF_TOKEN, authorization, options) {
        return NoticeApiFp(this.configuration).appNoticeGetAll(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoticeApi
     */
    appNoticeGetUsingNotice(X_XSRF_TOKEN, authorization, options) {
        return NoticeApiFp(this.configuration).appNoticeGetUsingNotice(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {UpdateNoticeDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoticeApi
     */
    appNoticeUpdate(input, X_XSRF_TOKEN, authorization, options) {
        return NoticeApiFp(this.configuration).appNoticeUpdate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * NotificationApi - fetch parameter creator
 * @export
 */
export const NotificationApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationGetNotificationSettings(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/notification/GetNotificationSettings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {GetUserNotificationsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationGetUserNotifications(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appNotificationGetUserNotifications.');
            }
            const localVarPath = `/api/services/app/notification/GetUserNotifications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("GetUserNotificationsInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationSetAllNotificationsAsRead(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/notification/SetAllNotificationsAsRead`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {EntityDtoGuid} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationSetNotificationAsRead(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appNotificationSetNotificationAsRead.');
            }
            const localVarPath = `/api/services/app/notification/SetNotificationAsRead`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoGuid" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {UpdateNotificationSettingsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationUpdateNotificationSettings(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appNotificationUpdateNotificationSettings.');
            }
            const localVarPath = `/api/services/app/notification/UpdateNotificationSettings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UpdateNotificationSettingsInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationGetNotificationSettings(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = NotificationApiFetchParamCreator(configuration).appNotificationGetNotificationSettings(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {GetUserNotificationsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationGetUserNotifications(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = NotificationApiFetchParamCreator(configuration).appNotificationGetUserNotifications(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationSetAllNotificationsAsRead(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = NotificationApiFetchParamCreator(configuration).appNotificationSetAllNotificationsAsRead(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoGuid} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationSetNotificationAsRead(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = NotificationApiFetchParamCreator(configuration).appNotificationSetNotificationAsRead(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {UpdateNotificationSettingsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationUpdateNotificationSettings(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = NotificationApiFetchParamCreator(configuration).appNotificationUpdateNotificationSettings(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationGetNotificationSettings(X_XSRF_TOKEN, authorization, options) {
            return NotificationApiFp(configuration).appNotificationGetNotificationSettings(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {GetUserNotificationsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationGetUserNotifications(input, X_XSRF_TOKEN, authorization, options) {
            return NotificationApiFp(configuration).appNotificationGetUserNotifications(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationSetAllNotificationsAsRead(X_XSRF_TOKEN, authorization, options) {
            return NotificationApiFp(configuration).appNotificationSetAllNotificationsAsRead(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoGuid} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationSetNotificationAsRead(input, X_XSRF_TOKEN, authorization, options) {
            return NotificationApiFp(configuration).appNotificationSetNotificationAsRead(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {UpdateNotificationSettingsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appNotificationUpdateNotificationSettings(input, X_XSRF_TOKEN, authorization, options) {
            return NotificationApiFp(configuration).appNotificationUpdateNotificationSettings(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    appNotificationGetNotificationSettings(X_XSRF_TOKEN, authorization, options) {
        return NotificationApiFp(this.configuration).appNotificationGetNotificationSettings(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {GetUserNotificationsInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    appNotificationGetUserNotifications(input, X_XSRF_TOKEN, authorization, options) {
        return NotificationApiFp(this.configuration).appNotificationGetUserNotifications(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    appNotificationSetAllNotificationsAsRead(X_XSRF_TOKEN, authorization, options) {
        return NotificationApiFp(this.configuration).appNotificationSetAllNotificationsAsRead(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {EntityDtoGuid} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    appNotificationSetNotificationAsRead(input, X_XSRF_TOKEN, authorization, options) {
        return NotificationApiFp(this.configuration).appNotificationSetNotificationAsRead(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {UpdateNotificationSettingsInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    appNotificationUpdateNotificationSettings(input, X_XSRF_TOKEN, authorization, options) {
        return NotificationApiFp(this.configuration).appNotificationUpdateNotificationSettings(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * OrganizationUnitApi - fetch parameter creator
 * @export
 */
export const OrganizationUnitApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 将用户添加到组织机构中
         * @param {UsersToOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitAddUserToOrganizationUnit(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitAddUserToOrganizationUnit.');
            }
            const localVarPath = `/api/services/app/organizationUnit/AddUserToOrganizationUnit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UsersToOrganizationUnitInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 创建组织机构
         * @param {CreateOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitCreateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitCreateOrganizationUnit.');
            }
            const localVarPath = `/api/services/app/organizationUnit/CreateOrganizationUnit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CreateOrganizationUnitInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 删除组织机构
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitDeleteOrganizationUnit(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitDeleteOrganizationUnit.');
            }
            const localVarPath = `/api/services/app/organizationUnit/DeleteOrganizationUnit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取可加入某组织单元的所有人员
         * @param {GetOrganizationUnitJoinableUserListInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetOrganizationUnitJoinableUserList(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitGetOrganizationUnitJoinableUserList.');
            }
            const localVarPath = `/api/services/app/organizationUnit/GetOrganizationUnitJoinableUserList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("GetOrganizationUnitJoinableUserListInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取组织机构下的所有人员
         * @param {GetOrganizationUnitUsersInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetOrganizationUnitUsers(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitGetOrganizationUnitUsers.');
            }
            const localVarPath = `/api/services/app/organizationUnit/GetOrganizationUnitUsers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("GetOrganizationUnitUsersInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取组织机构树
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetOrganizationUnits(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/organizationUnit/GetOrganizationUnits`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取用户所在组织机构
         * @param {UserIdInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetUserOrganizationUnits(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitGetUserOrganizationUnits.');
            }
            const localVarPath = `/api/services/app/organizationUnit/GetUserOrganizationUnits`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UserIdInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 用户是否属于组织机构
         * @param {UserToOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitIsInOrganizationUnit(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitIsInOrganizationUnit.');
            }
            const localVarPath = `/api/services/app/organizationUnit/IsInOrganizationUnit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UserToOrganizationUnitInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 移动组织机构
         * @param {MoveOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitMoveOrganizationUnit(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitMoveOrganizationUnit.');
            }
            const localVarPath = `/api/services/app/organizationUnit/MoveOrganizationUnit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("MoveOrganizationUnitInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 移除用户的全部组织机构
         * @param {number} userId
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitRemoveAllOrganizationUnit(userId, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling appOrganizationUnitRemoveAllOrganizationUnit.');
            }
            const localVarPath = `/api/services/app/organizationUnit/RemoveAllOrganizationUnit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 从组织机构中移除用户
         * @param {UsersToOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitRemoveUserFromOrganizationUnit(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitRemoveUserFromOrganizationUnit.');
            }
            const localVarPath = `/api/services/app/organizationUnit/RemoveUserFromOrganizationUnit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UsersToOrganizationUnitInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 修改组织机构信息
         * @param {UpdateOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitUpdateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appOrganizationUnitUpdateOrganizationUnit.');
            }
            const localVarPath = `/api/services/app/organizationUnit/UpdateOrganizationUnit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UpdateOrganizationUnitInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * OrganizationUnitApi - functional programming interface
 * @export
 */
export const OrganizationUnitApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 将用户添加到组织机构中
         * @param {UsersToOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitAddUserToOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitAddUserToOrganizationUnit(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 创建组织机构
         * @param {CreateOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitCreateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitCreateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 删除组织机构
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitDeleteOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitDeleteOrganizationUnit(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取可加入某组织单元的所有人员
         * @param {GetOrganizationUnitJoinableUserListInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetOrganizationUnitJoinableUserList(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitGetOrganizationUnitJoinableUserList(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取组织机构下的所有人员
         * @param {GetOrganizationUnitUsersInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetOrganizationUnitUsers(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitGetOrganizationUnitUsers(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取组织机构树
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetOrganizationUnits(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitGetOrganizationUnits(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取用户所在组织机构
         * @param {UserIdInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetUserOrganizationUnits(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitGetUserOrganizationUnits(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 用户是否属于组织机构
         * @param {UserToOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitIsInOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitIsInOrganizationUnit(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 移动组织机构
         * @param {MoveOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitMoveOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitMoveOrganizationUnit(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 移除用户的全部组织机构
         * @param {number} userId
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitRemoveAllOrganizationUnit(userId, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitRemoveAllOrganizationUnit(userId, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 从组织机构中移除用户
         * @param {UsersToOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitRemoveUserFromOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitRemoveUserFromOrganizationUnit(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 修改组织机构信息
         * @param {UpdateOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitUpdateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = OrganizationUnitApiFetchParamCreator(configuration).appOrganizationUnitUpdateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * OrganizationUnitApi - factory interface
 * @export
 */
export const OrganizationUnitApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 将用户添加到组织机构中
         * @param {UsersToOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitAddUserToOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
            return OrganizationUnitApiFp(configuration).appOrganizationUnitAddUserToOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 创建组织机构
         * @param {CreateOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitCreateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
            return OrganizationUnitApiFp(configuration).appOrganizationUnitCreateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 删除组织机构
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitDeleteOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
            return OrganizationUnitApiFp(configuration).appOrganizationUnitDeleteOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取可加入某组织单元的所有人员
         * @param {GetOrganizationUnitJoinableUserListInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetOrganizationUnitJoinableUserList(input, X_XSRF_TOKEN, authorization, options) {
            return OrganizationUnitApiFp(configuration).appOrganizationUnitGetOrganizationUnitJoinableUserList(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取组织机构下的所有人员
         * @param {GetOrganizationUnitUsersInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetOrganizationUnitUsers(input, X_XSRF_TOKEN, authorization, options) {
            return OrganizationUnitApiFp(configuration).appOrganizationUnitGetOrganizationUnitUsers(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取组织机构树
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetOrganizationUnits(X_XSRF_TOKEN, authorization, options) {
            return OrganizationUnitApiFp(configuration).appOrganizationUnitGetOrganizationUnits(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取用户所在组织机构
         * @param {UserIdInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitGetUserOrganizationUnits(input, X_XSRF_TOKEN, authorization, options) {
            return OrganizationUnitApiFp(configuration).appOrganizationUnitGetUserOrganizationUnits(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 用户是否属于组织机构
         * @param {UserToOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitIsInOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
            return OrganizationUnitApiFp(configuration).appOrganizationUnitIsInOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 移动组织机构
         * @param {MoveOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitMoveOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
            return OrganizationUnitApiFp(configuration).appOrganizationUnitMoveOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 移除用户的全部组织机构
         * @param {number} userId
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitRemoveAllOrganizationUnit(userId, X_XSRF_TOKEN, authorization, options) {
            return OrganizationUnitApiFp(configuration).appOrganizationUnitRemoveAllOrganizationUnit(userId, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 从组织机构中移除用户
         * @param {UsersToOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitRemoveUserFromOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
            return OrganizationUnitApiFp(configuration).appOrganizationUnitRemoveUserFromOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 修改组织机构信息
         * @param {UpdateOrganizationUnitInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appOrganizationUnitUpdateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
            return OrganizationUnitApiFp(configuration).appOrganizationUnitUpdateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * OrganizationUnitApi - object-oriented interface
 * @export
 * @class OrganizationUnitApi
 * @extends {BaseAPI}
 */
export class OrganizationUnitApi extends BaseAPI {
    /**
     *
     * @summary 将用户添加到组织机构中
     * @param {UsersToOrganizationUnitInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    appOrganizationUnitAddUserToOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
        return OrganizationUnitApiFp(this.configuration).appOrganizationUnitAddUserToOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 创建组织机构
     * @param {CreateOrganizationUnitInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    appOrganizationUnitCreateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
        return OrganizationUnitApiFp(this.configuration).appOrganizationUnitCreateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 删除组织机构
     * @param {EntityDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    appOrganizationUnitDeleteOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
        return OrganizationUnitApiFp(this.configuration).appOrganizationUnitDeleteOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取可加入某组织单元的所有人员
     * @param {GetOrganizationUnitJoinableUserListInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    appOrganizationUnitGetOrganizationUnitJoinableUserList(input, X_XSRF_TOKEN, authorization, options) {
        return OrganizationUnitApiFp(this.configuration).appOrganizationUnitGetOrganizationUnitJoinableUserList(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取组织机构下的所有人员
     * @param {GetOrganizationUnitUsersInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    appOrganizationUnitGetOrganizationUnitUsers(input, X_XSRF_TOKEN, authorization, options) {
        return OrganizationUnitApiFp(this.configuration).appOrganizationUnitGetOrganizationUnitUsers(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取组织机构树
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    appOrganizationUnitGetOrganizationUnits(X_XSRF_TOKEN, authorization, options) {
        return OrganizationUnitApiFp(this.configuration).appOrganizationUnitGetOrganizationUnits(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取用户所在组织机构
     * @param {UserIdInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    appOrganizationUnitGetUserOrganizationUnits(input, X_XSRF_TOKEN, authorization, options) {
        return OrganizationUnitApiFp(this.configuration).appOrganizationUnitGetUserOrganizationUnits(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 用户是否属于组织机构
     * @param {UserToOrganizationUnitInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    appOrganizationUnitIsInOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
        return OrganizationUnitApiFp(this.configuration).appOrganizationUnitIsInOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 移动组织机构
     * @param {MoveOrganizationUnitInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    appOrganizationUnitMoveOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
        return OrganizationUnitApiFp(this.configuration).appOrganizationUnitMoveOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 移除用户的全部组织机构
     * @param {number} userId
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    appOrganizationUnitRemoveAllOrganizationUnit(userId, X_XSRF_TOKEN, authorization, options) {
        return OrganizationUnitApiFp(this.configuration).appOrganizationUnitRemoveAllOrganizationUnit(userId, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 从组织机构中移除用户
     * @param {UsersToOrganizationUnitInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    appOrganizationUnitRemoveUserFromOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
        return OrganizationUnitApiFp(this.configuration).appOrganizationUnitRemoveUserFromOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 修改组织机构信息
     * @param {UpdateOrganizationUnitInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationUnitApi
     */
    appOrganizationUnitUpdateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options) {
        return OrganizationUnitApiFp(this.configuration).appOrganizationUnitUpdateOrganizationUnit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * PermissionApi - fetch parameter creator
 * @export
 */
export const PermissionApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 获取权限树
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appPermissionGetAllPermissionTree(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/permission/GetAllPermissionTree`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取所有权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appPermissionGetAllPermissions(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/permission/GetAllPermissions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取登录用户所有权值
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appPermissionGetUserPermissions(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/permission/GetUserPermissions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * PermissionApi - functional programming interface
 * @export
 */
export const PermissionApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 获取权限树
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appPermissionGetAllPermissionTree(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = PermissionApiFetchParamCreator(configuration).appPermissionGetAllPermissionTree(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取所有权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appPermissionGetAllPermissions(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = PermissionApiFetchParamCreator(configuration).appPermissionGetAllPermissions(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取登录用户所有权值
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appPermissionGetUserPermissions(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = PermissionApiFetchParamCreator(configuration).appPermissionGetUserPermissions(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * PermissionApi - factory interface
 * @export
 */
export const PermissionApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 获取权限树
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appPermissionGetAllPermissionTree(X_XSRF_TOKEN, authorization, options) {
            return PermissionApiFp(configuration).appPermissionGetAllPermissionTree(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取所有权限
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appPermissionGetAllPermissions(X_XSRF_TOKEN, authorization, options) {
            return PermissionApiFp(configuration).appPermissionGetAllPermissions(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取登录用户所有权值
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appPermissionGetUserPermissions(X_XSRF_TOKEN, authorization, options) {
            return PermissionApiFp(configuration).appPermissionGetUserPermissions(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * PermissionApi - object-oriented interface
 * @export
 * @class PermissionApi
 * @extends {BaseAPI}
 */
export class PermissionApi extends BaseAPI {
    /**
     *
     * @summary 获取权限树
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    appPermissionGetAllPermissionTree(X_XSRF_TOKEN, authorization, options) {
        return PermissionApiFp(this.configuration).appPermissionGetAllPermissionTree(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取所有权限
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    appPermissionGetAllPermissions(X_XSRF_TOKEN, authorization, options) {
        return PermissionApiFp(this.configuration).appPermissionGetAllPermissions(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取登录用户所有权值
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    appPermissionGetUserPermissions(X_XSRF_TOKEN, authorization, options) {
        return PermissionApiFp(this.configuration).appPermissionGetUserPermissions(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * ProfileApi - fetch parameter creator
 * @export
 */
export const ProfileApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 修改自己的密码
         * @param {ChangePasswordInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileChangePassword(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appProfileChangePassword.');
            }
            const localVarPath = `/api/services/app/profile/ChangePassword`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ChangePasswordInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 管理员修改别人的密码
         * @param {ChangeUserPasswordInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileChangeUserPassword(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appProfileChangeUserPassword.');
            }
            const localVarPath = `/api/services/app/profile/ChangeUserPassword`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ChangeUserPasswordInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 编辑前，获取用户的基本信息
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileGetCurrentUserProfileForEdit(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/profile/GetCurrentUserProfileForEdit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取密码复杂性设置
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileGetPasswordComplexitySetting(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/profile/GetPasswordComplexitySetting`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 管理员重置别人的密码
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileResetUserPassword(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appProfileResetUserPassword.');
            }
            const localVarPath = `/api/services/app/profile/ResetUserPassword`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 编辑用户的基本信息
         * @param {CurrentUserProfileEditDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileUpdateCurrentUserProfile(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appProfileUpdateCurrentUserProfile.');
            }
            const localVarPath = `/api/services/app/profile/UpdateCurrentUserProfile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CurrentUserProfileEditDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 修改头像
         * @param {UpdateProfilePictureInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileUpdateProfilePicture(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appProfileUpdateProfilePicture.');
            }
            const localVarPath = `/api/services/app/profile/UpdateProfilePicture`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UpdateProfilePictureInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 修改自己的密码
         * @param {ChangePasswordInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileChangePassword(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).appProfileChangePassword(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 管理员修改别人的密码
         * @param {ChangeUserPasswordInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileChangeUserPassword(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).appProfileChangeUserPassword(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 编辑前，获取用户的基本信息
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileGetCurrentUserProfileForEdit(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).appProfileGetCurrentUserProfileForEdit(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取密码复杂性设置
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileGetPasswordComplexitySetting(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).appProfileGetPasswordComplexitySetting(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 管理员重置别人的密码
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileResetUserPassword(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).appProfileResetUserPassword(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 编辑用户的基本信息
         * @param {CurrentUserProfileEditDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileUpdateCurrentUserProfile(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).appProfileUpdateCurrentUserProfile(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 修改头像
         * @param {UpdateProfilePictureInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileUpdateProfilePicture(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).appProfileUpdateProfilePicture(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 修改自己的密码
         * @param {ChangePasswordInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileChangePassword(input, X_XSRF_TOKEN, authorization, options) {
            return ProfileApiFp(configuration).appProfileChangePassword(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 管理员修改别人的密码
         * @param {ChangeUserPasswordInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileChangeUserPassword(input, X_XSRF_TOKEN, authorization, options) {
            return ProfileApiFp(configuration).appProfileChangeUserPassword(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 编辑前，获取用户的基本信息
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileGetCurrentUserProfileForEdit(X_XSRF_TOKEN, authorization, options) {
            return ProfileApiFp(configuration).appProfileGetCurrentUserProfileForEdit(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取密码复杂性设置
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileGetPasswordComplexitySetting(X_XSRF_TOKEN, authorization, options) {
            return ProfileApiFp(configuration).appProfileGetPasswordComplexitySetting(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 管理员重置别人的密码
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileResetUserPassword(input, X_XSRF_TOKEN, authorization, options) {
            return ProfileApiFp(configuration).appProfileResetUserPassword(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 编辑用户的基本信息
         * @param {CurrentUserProfileEditDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileUpdateCurrentUserProfile(input, X_XSRF_TOKEN, authorization, options) {
            return ProfileApiFp(configuration).appProfileUpdateCurrentUserProfile(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 修改头像
         * @param {UpdateProfilePictureInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appProfileUpdateProfilePicture(input, X_XSRF_TOKEN, authorization, options) {
            return ProfileApiFp(configuration).appProfileUpdateProfilePicture(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     *
     * @summary 修改自己的密码
     * @param {ChangePasswordInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    appProfileChangePassword(input, X_XSRF_TOKEN, authorization, options) {
        return ProfileApiFp(this.configuration).appProfileChangePassword(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 管理员修改别人的密码
     * @param {ChangeUserPasswordInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    appProfileChangeUserPassword(input, X_XSRF_TOKEN, authorization, options) {
        return ProfileApiFp(this.configuration).appProfileChangeUserPassword(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 编辑前，获取用户的基本信息
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    appProfileGetCurrentUserProfileForEdit(X_XSRF_TOKEN, authorization, options) {
        return ProfileApiFp(this.configuration).appProfileGetCurrentUserProfileForEdit(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取密码复杂性设置
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    appProfileGetPasswordComplexitySetting(X_XSRF_TOKEN, authorization, options) {
        return ProfileApiFp(this.configuration).appProfileGetPasswordComplexitySetting(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 管理员重置别人的密码
     * @param {EntityDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    appProfileResetUserPassword(input, X_XSRF_TOKEN, authorization, options) {
        return ProfileApiFp(this.configuration).appProfileResetUserPassword(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 编辑用户的基本信息
     * @param {CurrentUserProfileEditDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    appProfileUpdateCurrentUserProfile(input, X_XSRF_TOKEN, authorization, options) {
        return ProfileApiFp(this.configuration).appProfileUpdateCurrentUserProfile(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 修改头像
     * @param {UpdateProfilePictureInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    appProfileUpdateProfilePicture(input, X_XSRF_TOKEN, authorization, options) {
        return ProfileApiFp(this.configuration).appProfileUpdateProfilePicture(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * RegisterApi - fetch parameter creator
 * @export
 */
export const RegisterApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 注册
         * @param {RegisterInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegister(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRegisterRegister.');
            }
            const localVarPath = `/api/services/app/register/Register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("RegisterInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 通过邮箱注册
         * @param {RegisterByEmailInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegisterByEmail(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRegisterRegisterByEmail.');
            }
            const localVarPath = `/api/services/app/register/RegisterByEmail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("RegisterByEmailInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 通过手机号注册
         * @param {RegisterByPhoneNumberInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegisterByPhoneNumber(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRegisterRegisterByPhoneNumber.');
            }
            const localVarPath = `/api/services/app/register/RegisterByPhoneNumber`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("RegisterByPhoneNumberInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 通过手机号注册（只有手机号）
         * @param {RegisterOnlyPhoneNumberInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegisterOnlyPhoneNumber(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRegisterRegisterOnlyPhoneNumber.');
            }
            const localVarPath = `/api/services/app/register/RegisterOnlyPhoneNumber`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("RegisterOnlyPhoneNumberInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 发送邮箱验证码     (使用者：registerByEmail)
         * @param {SendConfirmEmailByCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterSendEmailCode(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRegisterSendEmailCode.');
            }
            const localVarPath = `/api/services/app/register/SendEmailCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("SendConfirmEmailByCaptchaInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 注册时发送手机证码    （register）
         * @param {PhoneWithCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRegisterSendPhoneNumberCode.');
            }
            const localVarPath = `/api/services/app/register/SendPhoneNumberCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("PhoneWithCaptchaInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RegisterApi - functional programming interface
 * @export
 */
export const RegisterApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 注册
         * @param {RegisterInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegister(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = RegisterApiFetchParamCreator(configuration).appRegisterRegister(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 通过邮箱注册
         * @param {RegisterByEmailInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegisterByEmail(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = RegisterApiFetchParamCreator(configuration).appRegisterRegisterByEmail(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 通过手机号注册
         * @param {RegisterByPhoneNumberInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegisterByPhoneNumber(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = RegisterApiFetchParamCreator(configuration).appRegisterRegisterByPhoneNumber(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 通过手机号注册（只有手机号）
         * @param {RegisterOnlyPhoneNumberInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegisterOnlyPhoneNumber(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = RegisterApiFetchParamCreator(configuration).appRegisterRegisterOnlyPhoneNumber(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 发送邮箱验证码     (使用者：registerByEmail)
         * @param {SendConfirmEmailByCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterSendEmailCode(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = RegisterApiFetchParamCreator(configuration).appRegisterSendEmailCode(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 注册时发送手机证码    （register）
         * @param {PhoneWithCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = RegisterApiFetchParamCreator(configuration).appRegisterSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * RegisterApi - factory interface
 * @export
 */
export const RegisterApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 注册
         * @param {RegisterInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegister(input, X_XSRF_TOKEN, authorization, options) {
            return RegisterApiFp(configuration).appRegisterRegister(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 通过邮箱注册
         * @param {RegisterByEmailInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegisterByEmail(input, X_XSRF_TOKEN, authorization, options) {
            return RegisterApiFp(configuration).appRegisterRegisterByEmail(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 通过手机号注册
         * @param {RegisterByPhoneNumberInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegisterByPhoneNumber(input, X_XSRF_TOKEN, authorization, options) {
            return RegisterApiFp(configuration).appRegisterRegisterByPhoneNumber(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 通过手机号注册（只有手机号）
         * @param {RegisterOnlyPhoneNumberInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterRegisterOnlyPhoneNumber(input, X_XSRF_TOKEN, authorization, options) {
            return RegisterApiFp(configuration).appRegisterRegisterOnlyPhoneNumber(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 发送邮箱验证码     (使用者：registerByEmail)
         * @param {SendConfirmEmailByCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterSendEmailCode(input, X_XSRF_TOKEN, authorization, options) {
            return RegisterApiFp(configuration).appRegisterSendEmailCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 注册时发送手机证码    （register）
         * @param {PhoneWithCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRegisterSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options) {
            return RegisterApiFp(configuration).appRegisterSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * RegisterApi - object-oriented interface
 * @export
 * @class RegisterApi
 * @extends {BaseAPI}
 */
export class RegisterApi extends BaseAPI {
    /**
     *
     * @summary 注册
     * @param {RegisterInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    appRegisterRegister(input, X_XSRF_TOKEN, authorization, options) {
        return RegisterApiFp(this.configuration).appRegisterRegister(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 通过邮箱注册
     * @param {RegisterByEmailInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    appRegisterRegisterByEmail(input, X_XSRF_TOKEN, authorization, options) {
        return RegisterApiFp(this.configuration).appRegisterRegisterByEmail(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 通过手机号注册
     * @param {RegisterByPhoneNumberInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    appRegisterRegisterByPhoneNumber(input, X_XSRF_TOKEN, authorization, options) {
        return RegisterApiFp(this.configuration).appRegisterRegisterByPhoneNumber(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 通过手机号注册（只有手机号）
     * @param {RegisterOnlyPhoneNumberInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    appRegisterRegisterOnlyPhoneNumber(input, X_XSRF_TOKEN, authorization, options) {
        return RegisterApiFp(this.configuration).appRegisterRegisterOnlyPhoneNumber(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 发送邮箱验证码     (使用者：registerByEmail)
     * @param {SendConfirmEmailByCaptchaInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    appRegisterSendEmailCode(input, X_XSRF_TOKEN, authorization, options) {
        return RegisterApiFp(this.configuration).appRegisterSendEmailCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 注册时发送手机证码    （register）
     * @param {PhoneWithCaptchaInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    appRegisterSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options) {
        return RegisterApiFp(this.configuration).appRegisterSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * RestPasswordApi - fetch parameter creator
 * @export
 */
export const RestPasswordApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 通过邮箱找回密码  （backknow）
         * @param {ResetPasswordByEmailInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordResetPasswordByEmail(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRestPasswordResetPasswordByEmail.');
            }
            const localVarPath = `/api/services/app/restPassword/ResetPasswordByEmail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ResetPasswordByEmailInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 通过手机号找回密码  （callback）
         * @param {ResetPasswordByPhoneNumberInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordResetPasswordByPhoneNumber(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRestPasswordResetPasswordByPhoneNumber.');
            }
            const localVarPath = `/api/services/app/restPassword/ResetPasswordByPhoneNumber`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ResetPasswordByPhoneNumberInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 发送邮箱验证码     (使用者：backknow)
         * @param {SendConfirmEmailByCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordSendEmailCode(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRestPasswordSendEmailCode.');
            }
            const localVarPath = `/api/services/app/restPassword/SendEmailCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("SendConfirmEmailByCaptchaInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 注册时发送手机证码    （callback）
         * @param {PhoneWithCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRestPasswordSendPhoneNumberCode.');
            }
            const localVarPath = `/api/services/app/restPassword/SendPhoneNumberCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("PhoneWithCaptchaInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RestPasswordApi - functional programming interface
 * @export
 */
export const RestPasswordApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 通过邮箱找回密码  （backknow）
         * @param {ResetPasswordByEmailInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordResetPasswordByEmail(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = RestPasswordApiFetchParamCreator(configuration).appRestPasswordResetPasswordByEmail(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 通过手机号找回密码  （callback）
         * @param {ResetPasswordByPhoneNumberInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordResetPasswordByPhoneNumber(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = RestPasswordApiFetchParamCreator(configuration).appRestPasswordResetPasswordByPhoneNumber(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 发送邮箱验证码     (使用者：backknow)
         * @param {SendConfirmEmailByCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordSendEmailCode(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = RestPasswordApiFetchParamCreator(configuration).appRestPasswordSendEmailCode(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 注册时发送手机证码    （callback）
         * @param {PhoneWithCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = RestPasswordApiFetchParamCreator(configuration).appRestPasswordSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * RestPasswordApi - factory interface
 * @export
 */
export const RestPasswordApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 通过邮箱找回密码  （backknow）
         * @param {ResetPasswordByEmailInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordResetPasswordByEmail(input, X_XSRF_TOKEN, authorization, options) {
            return RestPasswordApiFp(configuration).appRestPasswordResetPasswordByEmail(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 通过手机号找回密码  （callback）
         * @param {ResetPasswordByPhoneNumberInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordResetPasswordByPhoneNumber(input, X_XSRF_TOKEN, authorization, options) {
            return RestPasswordApiFp(configuration).appRestPasswordResetPasswordByPhoneNumber(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 发送邮箱验证码     (使用者：backknow)
         * @param {SendConfirmEmailByCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordSendEmailCode(input, X_XSRF_TOKEN, authorization, options) {
            return RestPasswordApiFp(configuration).appRestPasswordSendEmailCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 注册时发送手机证码    （callback）
         * @param {PhoneWithCaptchaInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRestPasswordSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options) {
            return RestPasswordApiFp(configuration).appRestPasswordSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * RestPasswordApi - object-oriented interface
 * @export
 * @class RestPasswordApi
 * @extends {BaseAPI}
 */
export class RestPasswordApi extends BaseAPI {
    /**
     *
     * @summary 通过邮箱找回密码  （backknow）
     * @param {ResetPasswordByEmailInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestPasswordApi
     */
    appRestPasswordResetPasswordByEmail(input, X_XSRF_TOKEN, authorization, options) {
        return RestPasswordApiFp(this.configuration).appRestPasswordResetPasswordByEmail(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 通过手机号找回密码  （callback）
     * @param {ResetPasswordByPhoneNumberInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestPasswordApi
     */
    appRestPasswordResetPasswordByPhoneNumber(input, X_XSRF_TOKEN, authorization, options) {
        return RestPasswordApiFp(this.configuration).appRestPasswordResetPasswordByPhoneNumber(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 发送邮箱验证码     (使用者：backknow)
     * @param {SendConfirmEmailByCaptchaInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestPasswordApi
     */
    appRestPasswordSendEmailCode(input, X_XSRF_TOKEN, authorization, options) {
        return RestPasswordApiFp(this.configuration).appRestPasswordSendEmailCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 注册时发送手机证码    （callback）
     * @param {PhoneWithCaptchaInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestPasswordApi
     */
    appRestPasswordSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options) {
        return RestPasswordApiFp(this.configuration).appRestPasswordSendPhoneNumberCode(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * RoleApi - fetch parameter creator
 * @export
 */
export const RoleApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 创建或修改角色
         * @param {CreateOrUpdateRoleInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleCreateOrUpdateRole(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRoleCreateOrUpdateRole.');
            }
            const localVarPath = `/api/services/app/role/CreateOrUpdateRole`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CreateOrUpdateRoleInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 删除角色
         * @param {EntityDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleDeleteRole(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRoleDeleteRole.');
            }
            const localVarPath = `/api/services/app/role/DeleteRole`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取编辑时需要的角色信息
         * @param {NullableIdDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleGetRoleForEdit(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRoleGetRoleForEdit.');
            }
            const localVarPath = `/api/services/app/role/GetRoleForEdit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("NullableIdDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取角色列表
         * @param {GetRolesInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleGetRoles(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appRoleGetRoles.');
            }
            const localVarPath = `/api/services/app/role/GetRoles`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("GetRolesInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RoleApi - functional programming interface
 * @export
 */
export const RoleApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 创建或修改角色
         * @param {CreateOrUpdateRoleInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleCreateOrUpdateRole(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = RoleApiFetchParamCreator(configuration).appRoleCreateOrUpdateRole(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 删除角色
         * @param {EntityDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleDeleteRole(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = RoleApiFetchParamCreator(configuration).appRoleDeleteRole(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取编辑时需要的角色信息
         * @param {NullableIdDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleGetRoleForEdit(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = RoleApiFetchParamCreator(configuration).appRoleGetRoleForEdit(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取角色列表
         * @param {GetRolesInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleGetRoles(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = RoleApiFetchParamCreator(configuration).appRoleGetRoles(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * RoleApi - factory interface
 * @export
 */
export const RoleApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 创建或修改角色
         * @param {CreateOrUpdateRoleInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleCreateOrUpdateRole(input, X_XSRF_TOKEN, authorization, options) {
            return RoleApiFp(configuration).appRoleCreateOrUpdateRole(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 删除角色
         * @param {EntityDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleDeleteRole(input, X_XSRF_TOKEN, authorization, options) {
            return RoleApiFp(configuration).appRoleDeleteRole(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取编辑时需要的角色信息
         * @param {NullableIdDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleGetRoleForEdit(input, X_XSRF_TOKEN, authorization, options) {
            return RoleApiFp(configuration).appRoleGetRoleForEdit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取角色列表
         * @param {GetRolesInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appRoleGetRoles(input, X_XSRF_TOKEN, authorization, options) {
            return RoleApiFp(configuration).appRoleGetRoles(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
export class RoleApi extends BaseAPI {
    /**
     *
     * @summary 创建或修改角色
     * @param {CreateOrUpdateRoleInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    appRoleCreateOrUpdateRole(input, X_XSRF_TOKEN, authorization, options) {
        return RoleApiFp(this.configuration).appRoleCreateOrUpdateRole(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 删除角色
     * @param {EntityDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    appRoleDeleteRole(input, X_XSRF_TOKEN, authorization, options) {
        return RoleApiFp(this.configuration).appRoleDeleteRole(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取编辑时需要的角色信息
     * @param {NullableIdDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    appRoleGetRoleForEdit(input, X_XSRF_TOKEN, authorization, options) {
        return RoleApiFp(this.configuration).appRoleGetRoleForEdit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取角色列表
     * @param {GetRolesInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    appRoleGetRoles(input, X_XSRF_TOKEN, authorization, options) {
        return RoleApiFp(this.configuration).appRoleGetRoles(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * SMSLoginApi - fetch parameter creator
 * @export
 */
export const SMSLoginApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 手机短信登录认证
         * @param {LoginForSmsCode} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sMSLoginAuthenticate(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling sMSLoginAuthenticate.');
            }
            const localVarPath = `/api/SMSLogin`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("LoginForSmsCode" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SMSLoginApi - functional programming interface
 * @export
 */
export const SMSLoginApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 手机短信登录认证
         * @param {LoginForSmsCode} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sMSLoginAuthenticate(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = SMSLoginApiFetchParamCreator(configuration).sMSLoginAuthenticate(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * SMSLoginApi - factory interface
 * @export
 */
export const SMSLoginApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 手机短信登录认证
         * @param {LoginForSmsCode} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sMSLoginAuthenticate(input, X_XSRF_TOKEN, authorization, options) {
            return SMSLoginApiFp(configuration).sMSLoginAuthenticate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * SMSLoginApi - object-oriented interface
 * @export
 * @class SMSLoginApi
 * @extends {BaseAPI}
 */
export class SMSLoginApi extends BaseAPI {
    /**
     *
     * @summary 手机短信登录认证
     * @param {LoginForSmsCode} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMSLoginApi
     */
    sMSLoginAuthenticate(input, X_XSRF_TOKEN, authorization, options) {
        return SMSLoginApiFp(this.configuration).sMSLoginAuthenticate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * SessionApi - fetch parameter creator
 * @export
 */
export const SessionApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appSessionGetCurrentLoginInformations(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/session/GetCurrentLoginInformations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SessionApi - functional programming interface
 * @export
 */
export const SessionApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appSessionGetCurrentLoginInformations(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = SessionApiFetchParamCreator(configuration).appSessionGetCurrentLoginInformations(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * SessionApi - factory interface
 * @export
 */
export const SessionApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appSessionGetCurrentLoginInformations(X_XSRF_TOKEN, authorization, options) {
            return SessionApiFp(configuration).appSessionGetCurrentLoginInformations(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * SessionApi - object-oriented interface
 * @export
 * @class SessionApi
 * @extends {BaseAPI}
 */
export class SessionApi extends BaseAPI {
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    appSessionGetCurrentLoginInformations(X_XSRF_TOKEN, authorization, options) {
        return SessionApiFp(this.configuration).appSessionGetCurrentLoginInformations(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * ThirdPartyLoginForTokenApi - fetch parameter creator
 * @export
 */
export const ThirdPartyLoginForTokenApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 第三方登录   返回token
         * @param {ThirdPartyLoginModel} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        thirdPartyLoginForTokenAuthenticate(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling thirdPartyLoginForTokenAuthenticate.');
            }
            const localVarPath = `/api/ThirdPartyLoginForToken`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ThirdPartyLoginModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ThirdPartyLoginForTokenApi - functional programming interface
 * @export
 */
export const ThirdPartyLoginForTokenApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 第三方登录   返回token
         * @param {ThirdPartyLoginModel} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        thirdPartyLoginForTokenAuthenticate(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = ThirdPartyLoginForTokenApiFetchParamCreator(configuration).thirdPartyLoginForTokenAuthenticate(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ThirdPartyLoginForTokenApi - factory interface
 * @export
 */
export const ThirdPartyLoginForTokenApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 第三方登录   返回token
         * @param {ThirdPartyLoginModel} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        thirdPartyLoginForTokenAuthenticate(input, X_XSRF_TOKEN, authorization, options) {
            return ThirdPartyLoginForTokenApiFp(configuration).thirdPartyLoginForTokenAuthenticate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * ThirdPartyLoginForTokenApi - object-oriented interface
 * @export
 * @class ThirdPartyLoginForTokenApi
 * @extends {BaseAPI}
 */
export class ThirdPartyLoginForTokenApi extends BaseAPI {
    /**
     *
     * @summary 第三方登录   返回token
     * @param {ThirdPartyLoginModel} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThirdPartyLoginForTokenApi
     */
    thirdPartyLoginForTokenAuthenticate(input, X_XSRF_TOKEN, authorization, options) {
        return ThirdPartyLoginForTokenApiFp(this.configuration).thirdPartyLoginForTokenAuthenticate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * TopicApi - fetch parameter creator
 * @export
 */
export const TopicApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {CreateTopicDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appTopicCreate(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appTopicCreate.');
            }
            const localVarPath = `/api/services/app/topic/Create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CreateTopicDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appTopicDelete(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appTopicDelete.');
            }
            const localVarPath = `/api/services/app/topic/Delete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appTopicGet(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appTopicGet.');
            }
            const localVarPath = `/api/services/app/topic/Get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appTopicGetAll(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appTopicGetAll.');
            }
            const localVarPath = `/api/services/app/topic/GetAll`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("PagedSortedAndFilteredInputDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {UpdateTopicDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appTopicUpdate(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appTopicUpdate.');
            }
            const localVarPath = `/api/services/app/topic/Update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UpdateTopicDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TopicApi - functional programming interface
 * @export
 */
export const TopicApiFp = function (configuration) {
    return {
        /**
         *
         * @param {CreateTopicDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appTopicCreate(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = TopicApiFetchParamCreator(configuration).appTopicCreate(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appTopicDelete(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = TopicApiFetchParamCreator(configuration).appTopicDelete(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appTopicGet(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = TopicApiFetchParamCreator(configuration).appTopicGet(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appTopicGetAll(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = TopicApiFetchParamCreator(configuration).appTopicGetAll(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {UpdateTopicDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appTopicUpdate(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = TopicApiFetchParamCreator(configuration).appTopicUpdate(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * TopicApi - factory interface
 * @export
 */
export const TopicApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {CreateTopicDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appTopicCreate(input, X_XSRF_TOKEN, authorization, options) {
            return TopicApiFp(configuration).appTopicCreate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appTopicDelete(input, X_XSRF_TOKEN, authorization, options) {
            return TopicApiFp(configuration).appTopicDelete(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {EntityDtoInt32} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appTopicGet(input, X_XSRF_TOKEN, authorization, options) {
            return TopicApiFp(configuration).appTopicGet(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {PagedSortedAndFilteredInputDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appTopicGetAll(input, X_XSRF_TOKEN, authorization, options) {
            return TopicApiFp(configuration).appTopicGetAll(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @param {UpdateTopicDto} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appTopicUpdate(input, X_XSRF_TOKEN, authorization, options) {
            return TopicApiFp(configuration).appTopicUpdate(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * TopicApi - object-oriented interface
 * @export
 * @class TopicApi
 * @extends {BaseAPI}
 */
export class TopicApi extends BaseAPI {
    /**
     *
     * @param {CreateTopicDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    appTopicCreate(input, X_XSRF_TOKEN, authorization, options) {
        return TopicApiFp(this.configuration).appTopicCreate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {EntityDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    appTopicDelete(input, X_XSRF_TOKEN, authorization, options) {
        return TopicApiFp(this.configuration).appTopicDelete(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {EntityDtoInt32} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    appTopicGet(input, X_XSRF_TOKEN, authorization, options) {
        return TopicApiFp(this.configuration).appTopicGet(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {PagedSortedAndFilteredInputDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    appTopicGetAll(input, X_XSRF_TOKEN, authorization, options) {
        return TopicApiFp(this.configuration).appTopicGetAll(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {UpdateTopicDto} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    appTopicUpdate(input, X_XSRF_TOKEN, authorization, options) {
        return TopicApiFp(this.configuration).appTopicUpdate(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * TypeScriptApi - fetch parameter creator
 * @export
 */
export const TypeScriptApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {boolean} [isCompleteService]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typeScriptGet(X_XSRF_TOKEN, authorization, isCompleteService, options = {}) {
            const localVarPath = `/api/TypeScript`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (isCompleteService !== undefined) {
                localVarQueryParameter['isCompleteService'] = isCompleteService;
            }
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TypeScriptApi - functional programming interface
 * @export
 */
export const TypeScriptApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {boolean} [isCompleteService]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typeScriptGet(X_XSRF_TOKEN, authorization, isCompleteService, options) {
            const localVarFetchArgs = TypeScriptApiFetchParamCreator(configuration).typeScriptGet(X_XSRF_TOKEN, authorization, isCompleteService, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * TypeScriptApi - factory interface
 * @export
 */
export const TypeScriptApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {boolean} [isCompleteService]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typeScriptGet(X_XSRF_TOKEN, authorization, isCompleteService, options) {
            return TypeScriptApiFp(configuration).typeScriptGet(X_XSRF_TOKEN, authorization, isCompleteService, options)(fetch, basePath);
        },
    };
};
/**
 * TypeScriptApi - object-oriented interface
 * @export
 * @class TypeScriptApi
 * @extends {BaseAPI}
 */
export class TypeScriptApi extends BaseAPI {
    /**
     *
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {boolean} [isCompleteService]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypeScriptApi
     */
    typeScriptGet(X_XSRF_TOKEN, authorization, isCompleteService, options) {
        return TypeScriptApiFp(this.configuration).typeScriptGet(X_XSRF_TOKEN, authorization, isCompleteService, options)(this.fetch, this.basePath);
    }
}
/**
 * UserApi - fetch parameter creator
 * @export
 */
export const UserApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 批量激活用户
         * @param {BatchActiveUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserBatchActiveUser(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserBatchActiveUser.');
            }
            const localVarPath = `/api/services/app/user/BatchActiveUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("BatchActiveUserInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 批量删除用户
         * @param {ArrayDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserBatchDeleteUser(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserBatchDeleteUser.');
            }
            const localVarPath = `/api/services/app/user/BatchDeleteUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ArrayDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 批量解锁用户
         * @param {ArrayDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserBatchUnlockUser(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserBatchUnlockUser.');
            }
            const localVarPath = `/api/services/app/user/BatchUnlockUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ArrayDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 创建或编辑用户，Id为空时创建，否则编辑
         * @param {CreateOrUpdateUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserCreateOrUpdateUser(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserCreateOrUpdateUser.');
            }
            const localVarPath = `/api/services/app/user/CreateOrUpdateUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("CreateOrUpdateUserInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 删除用户
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserDeleteUser(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserDeleteUser.');
            }
            const localVarPath = `/api/services/app/user/DeleteUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取全部的角色
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetRoles(X_XSRF_TOKEN, authorization, options = {}) {
            const localVarPath = `/api/services/app/user/GetRoles`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取编辑时需要的单个用户信息
         * @param {NullableIdDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUserForEdit(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserGetUserForEdit.');
            }
            const localVarPath = `/api/services/app/user/GetUserForEdit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("NullableIdDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取编辑时需要的用户权限
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUserPermissionsForEdit(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserGetUserPermissionsForEdit.');
            }
            const localVarPath = `/api/services/app/user/GetUserPermissionsForEdit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 获取用户列表
         * @param {GetUsersInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUsers(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserGetUsers.');
            }
            const localVarPath = `/api/services/app/user/GetUsers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("GetUsersInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 导出用户信息到Excel文件
         * @param {GetUsersInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUsersToExcel(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserGetUsersToExcel.');
            }
            const localVarPath = `/api/services/app/user/GetUsersToExcel`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("GetUsersInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 重置用户权限
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserResetUserSpecificPermissions(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserResetUserSpecificPermissions.');
            }
            const localVarPath = `/api/services/app/user/ResetUserSpecificPermissions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 切换用户启用禁用状态
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserToggleActiveStatus(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserToggleActiveStatus.');
            }
            const localVarPath = `/api/services/app/user/ToggleActiveStatus`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 解锁用户
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserUnlockUser(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserUnlockUser.');
            }
            const localVarPath = `/api/services/app/user/UnlockUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EntityDtoInt64" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 用户修改自己的信息
         * @param {UpdateCurrentUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserUpdateCurrentUser(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserUpdateCurrentUser.');
            }
            const localVarPath = `/api/services/app/user/UpdateCurrentUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UpdateCurrentUserInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 修改用户权限
         * @param {UpdateUserPermissionsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserUpdateUserPermissions(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserUpdateUserPermissions.');
            }
            const localVarPath = `/api/services/app/user/UpdateUserPermissions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UpdateUserPermissionsInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 批量激活用户
         * @param {BatchActiveUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserBatchActiveUser(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).appUserBatchActiveUser(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 批量删除用户
         * @param {ArrayDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserBatchDeleteUser(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).appUserBatchDeleteUser(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 批量解锁用户
         * @param {ArrayDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserBatchUnlockUser(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).appUserBatchUnlockUser(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 创建或编辑用户，Id为空时创建，否则编辑
         * @param {CreateOrUpdateUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserCreateOrUpdateUser(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).appUserCreateOrUpdateUser(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 删除用户
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserDeleteUser(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).appUserDeleteUser(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取全部的角色
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetRoles(X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).appUserGetRoles(X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取编辑时需要的单个用户信息
         * @param {NullableIdDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUserForEdit(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).appUserGetUserForEdit(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取编辑时需要的用户权限
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUserPermissionsForEdit(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).appUserGetUserPermissionsForEdit(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 获取用户列表
         * @param {GetUsersInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUsers(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).appUserGetUsers(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 导出用户信息到Excel文件
         * @param {GetUsersInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUsersToExcel(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).appUserGetUsersToExcel(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 重置用户权限
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserResetUserSpecificPermissions(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).appUserResetUserSpecificPermissions(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 切换用户启用禁用状态
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserToggleActiveStatus(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).appUserToggleActiveStatus(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 解锁用户
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserUnlockUser(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).appUserUnlockUser(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 用户修改自己的信息
         * @param {UpdateCurrentUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserUpdateCurrentUser(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).appUserUpdateCurrentUser(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary 修改用户权限
         * @param {UpdateUserPermissionsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserUpdateUserPermissions(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).appUserUpdateUserPermissions(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 批量激活用户
         * @param {BatchActiveUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserBatchActiveUser(input, X_XSRF_TOKEN, authorization, options) {
            return UserApiFp(configuration).appUserBatchActiveUser(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 批量删除用户
         * @param {ArrayDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserBatchDeleteUser(input, X_XSRF_TOKEN, authorization, options) {
            return UserApiFp(configuration).appUserBatchDeleteUser(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 批量解锁用户
         * @param {ArrayDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserBatchUnlockUser(input, X_XSRF_TOKEN, authorization, options) {
            return UserApiFp(configuration).appUserBatchUnlockUser(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 创建或编辑用户，Id为空时创建，否则编辑
         * @param {CreateOrUpdateUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserCreateOrUpdateUser(input, X_XSRF_TOKEN, authorization, options) {
            return UserApiFp(configuration).appUserCreateOrUpdateUser(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 删除用户
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserDeleteUser(input, X_XSRF_TOKEN, authorization, options) {
            return UserApiFp(configuration).appUserDeleteUser(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取全部的角色
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetRoles(X_XSRF_TOKEN, authorization, options) {
            return UserApiFp(configuration).appUserGetRoles(X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取编辑时需要的单个用户信息
         * @param {NullableIdDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUserForEdit(input, X_XSRF_TOKEN, authorization, options) {
            return UserApiFp(configuration).appUserGetUserForEdit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取编辑时需要的用户权限
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUserPermissionsForEdit(input, X_XSRF_TOKEN, authorization, options) {
            return UserApiFp(configuration).appUserGetUserPermissionsForEdit(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 获取用户列表
         * @param {GetUsersInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUsers(input, X_XSRF_TOKEN, authorization, options) {
            return UserApiFp(configuration).appUserGetUsers(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 导出用户信息到Excel文件
         * @param {GetUsersInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserGetUsersToExcel(input, X_XSRF_TOKEN, authorization, options) {
            return UserApiFp(configuration).appUserGetUsersToExcel(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 重置用户权限
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserResetUserSpecificPermissions(input, X_XSRF_TOKEN, authorization, options) {
            return UserApiFp(configuration).appUserResetUserSpecificPermissions(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 切换用户启用禁用状态
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserToggleActiveStatus(input, X_XSRF_TOKEN, authorization, options) {
            return UserApiFp(configuration).appUserToggleActiveStatus(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 解锁用户
         * @param {EntityDtoInt64} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserUnlockUser(input, X_XSRF_TOKEN, authorization, options) {
            return UserApiFp(configuration).appUserUnlockUser(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 用户修改自己的信息
         * @param {UpdateCurrentUserInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserUpdateCurrentUser(input, X_XSRF_TOKEN, authorization, options) {
            return UserApiFp(configuration).appUserUpdateCurrentUser(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary 修改用户权限
         * @param {UpdateUserPermissionsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserUpdateUserPermissions(input, X_XSRF_TOKEN, authorization, options) {
            return UserApiFp(configuration).appUserUpdateUserPermissions(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     *
     * @summary 批量激活用户
     * @param {BatchActiveUserInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    appUserBatchActiveUser(input, X_XSRF_TOKEN, authorization, options) {
        return UserApiFp(this.configuration).appUserBatchActiveUser(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 批量删除用户
     * @param {ArrayDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    appUserBatchDeleteUser(input, X_XSRF_TOKEN, authorization, options) {
        return UserApiFp(this.configuration).appUserBatchDeleteUser(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 批量解锁用户
     * @param {ArrayDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    appUserBatchUnlockUser(input, X_XSRF_TOKEN, authorization, options) {
        return UserApiFp(this.configuration).appUserBatchUnlockUser(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 创建或编辑用户，Id为空时创建，否则编辑
     * @param {CreateOrUpdateUserInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    appUserCreateOrUpdateUser(input, X_XSRF_TOKEN, authorization, options) {
        return UserApiFp(this.configuration).appUserCreateOrUpdateUser(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 删除用户
     * @param {EntityDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    appUserDeleteUser(input, X_XSRF_TOKEN, authorization, options) {
        return UserApiFp(this.configuration).appUserDeleteUser(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取全部的角色
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    appUserGetRoles(X_XSRF_TOKEN, authorization, options) {
        return UserApiFp(this.configuration).appUserGetRoles(X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取编辑时需要的单个用户信息
     * @param {NullableIdDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    appUserGetUserForEdit(input, X_XSRF_TOKEN, authorization, options) {
        return UserApiFp(this.configuration).appUserGetUserForEdit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取编辑时需要的用户权限
     * @param {EntityDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    appUserGetUserPermissionsForEdit(input, X_XSRF_TOKEN, authorization, options) {
        return UserApiFp(this.configuration).appUserGetUserPermissionsForEdit(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 获取用户列表
     * @param {GetUsersInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    appUserGetUsers(input, X_XSRF_TOKEN, authorization, options) {
        return UserApiFp(this.configuration).appUserGetUsers(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 导出用户信息到Excel文件
     * @param {GetUsersInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    appUserGetUsersToExcel(input, X_XSRF_TOKEN, authorization, options) {
        return UserApiFp(this.configuration).appUserGetUsersToExcel(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 重置用户权限
     * @param {EntityDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    appUserResetUserSpecificPermissions(input, X_XSRF_TOKEN, authorization, options) {
        return UserApiFp(this.configuration).appUserResetUserSpecificPermissions(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 切换用户启用禁用状态
     * @param {EntityDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    appUserToggleActiveStatus(input, X_XSRF_TOKEN, authorization, options) {
        return UserApiFp(this.configuration).appUserToggleActiveStatus(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 解锁用户
     * @param {EntityDtoInt64} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    appUserUnlockUser(input, X_XSRF_TOKEN, authorization, options) {
        return UserApiFp(this.configuration).appUserUnlockUser(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 用户修改自己的信息
     * @param {UpdateCurrentUserInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    appUserUpdateCurrentUser(input, X_XSRF_TOKEN, authorization, options) {
        return UserApiFp(this.configuration).appUserUpdateCurrentUser(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary 修改用户权限
     * @param {UpdateUserPermissionsInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    appUserUpdateUserPermissions(input, X_XSRF_TOKEN, authorization, options) {
        return UserApiFp(this.configuration).appUserUpdateUserPermissions(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * UserLoginApi - fetch parameter creator
 * @export
 */
export const UserLoginApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 获取登录历史
         * @param {GetUserLoginsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserLoginGetRecentUserLoginAttempts(input, X_XSRF_TOKEN, authorization, options = {}) {
            // verify required parameter 'input' is not null or undefined
            if (input === null || input === undefined) {
                throw new RequiredError('input', 'Required parameter input was null or undefined when calling appUserLoginGetRecentUserLoginAttempts.');
            }
            const localVarPath = `/api/services/app/userLogin/GetRecentUserLoginAttempts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (X_XSRF_TOKEN !== undefined && X_XSRF_TOKEN !== null) {
                localVarHeaderParameter['X-XSRF-TOKEN'] = String(X_XSRF_TOKEN);
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("GetUserLoginsInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(input || {}) : (input || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UserLoginApi - functional programming interface
 * @export
 */
export const UserLoginApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 获取登录历史
         * @param {GetUserLoginsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserLoginGetRecentUserLoginAttempts(input, X_XSRF_TOKEN, authorization, options) {
            const localVarFetchArgs = UserLoginApiFetchParamCreator(configuration).appUserLoginGetRecentUserLoginAttempts(input, X_XSRF_TOKEN, authorization, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * UserLoginApi - factory interface
 * @export
 */
export const UserLoginApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary 获取登录历史
         * @param {GetUserLoginsInput} input
         * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
         * @param {string} [authorization] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appUserLoginGetRecentUserLoginAttempts(input, X_XSRF_TOKEN, authorization, options) {
            return UserLoginApiFp(configuration).appUserLoginGetRecentUserLoginAttempts(input, X_XSRF_TOKEN, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * UserLoginApi - object-oriented interface
 * @export
 * @class UserLoginApi
 * @extends {BaseAPI}
 */
export class UserLoginApi extends BaseAPI {
    /**
     *
     * @summary 获取登录历史
     * @param {GetUserLoginsInput} input
     * @param {string} [X_XSRF_TOKEN] XSRF-TOKEN
     * @param {string} [authorization] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLoginApi
     */
    appUserLoginGetRecentUserLoginAttempts(input, X_XSRF_TOKEN, authorization, options) {
        return UserLoginApiFp(this.configuration).appUserLoginGetRecentUserLoginAttempts(input, X_XSRF_TOKEN, authorization, options)(this.fetch, this.basePath);
    }
}
